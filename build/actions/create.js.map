{"version":3,"sources":["../../src/actions/create.js"],"names":["buildCreate","middleware","micro","plugin","schema","params","options","isBulkInsert","Array","isArray","Promise","resolve","reject","builder","transaction","tableName","insert","map","returning","transacting","trx","then","ids","max","reduce","id","raw","commit","catch","rollback","error","code","message","detail","split"],"mappings":";;;;;QAOgBA,W,GAAAA,W;;AAPhB;;;;AACA;;;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB;AAAA,WACEN,YAAYC,UAAZ,EAAwBG,MAAxB,EAAgCC,MAAhC,EAAwCC,OAAxC,CADF;AAAA,GADa;AAAA,C;;AAIR,SAASN,WAAT,CAAsBC,UAAtB,EAAkCG,MAAlC,EAAqE;AAAA,MAA3BC,MAA2B,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC1E,MAAMC,eAAeC,MAAMC,OAAN,CAAcJ,MAAd,CAArB;AACA,SAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI,CAACP,MAAL,EAAa;AACX;AACD;AACD,QAAIQ,gBAAJ;;AAEA,QAAIN,YAAJ,EAAkB;AAChBM,gBAAUZ,WAAWa,WAAX,CAAuB,eAAO;AACpCb,mBAAWG,OAAOW,SAAlB,EACGC,MADH,CACUX,OAAOY,GAAP,CAAW;AAAA,iBAAU,yBAAUb,MAAV,EAAkBC,MAAlB,EAA0BO,MAA1B,CAAV;AAAA,SAAX,CADV,EAEGM,SAFH,CAEa,IAFb,EAGGC,WAHH,CAGeC,GAHf,EAIGC,IAJH,CAIQ,UAASC,GAAT,EAAc;AAClB,cAAMC,MAAMD,IAAIE,MAAJ,CAAW,UAACD,GAAD,EAAME,EAAN;AAAA,mBAAaF,MAAME,EAAN,GAAWA,EAAX,GAAgBF,GAA7B;AAAA,WAAX,EAA6C,CAA7C,CAAZ;AACA,iBAAOtB,WACJyB,GADI,qBACmBtB,OAAOW,SAD1B,6BAC6DQ,GAD7D,QAEJF,IAFI,CAEC;AAAA,mBAAMC,GAAN;AAAA,WAFD,CAAP;AAGD,SATH,EAUGD,IAVH,CAUQD,IAAIO,MAVZ,EAWGC,KAXH,CAWSR,IAAIS,QAXb;AAYD,OAbO,CAAV;AAcD,KAfD,MAeO;AACLhB,gBAAUZ,WAAWG,OAAOW,SAAlB,EACPC,MADO,CACA,yBAAUZ,MAAV,EAAkBC,MAAlB,EAA0BO,MAA1B,CADA,EAEPM,SAFO,CAEG,IAFH,CAAV;AAGD;;AAEDL,YACGQ,IADH,CACQV,OADR,EAEGiB,KAFH,CAES,iBAAS;AACdhB,aAAOkB,MAAMC,IAAN,iCAAgCD,KAAhC,GAAwC;AAC7CC,qCAD6C;AAE7CC,iBAASF,MAAMG,MAAN,IAAgBH,MAAME,OAAN,CAAcE,KAAd,CAAoB,KAApB,EAA4B,CAA5B;AAFoB,OAA/C;AAID,KAPH;AAQD,GAnCM,CAAP;AAoCD","file":"create.js","sourcesContent":["import setParams from './../utils/set-params';\nimport { ERROR_CREATE, ERROR_FIND_ONE } from './constants';\n\nexport default (middleware, micro, plugin) =>\n  (schema, params, options) =>\n    buildCreate(middleware, schema, params, options);\n\nexport function buildCreate (middleware, schema, params = {}, options = {}) {\n  const isBulkInsert = Array.isArray(params);\n  return new Promise((resolve, reject) => {\n    if (!params) {\n      return;\n    }\n    let builder;\n\n    if (isBulkInsert) {\n      builder = middleware.transaction(trx => {\n          middleware(schema.tableName)\n            .insert(params.map(params => setParams(schema, params, reject)))\n            .returning('id')\n            .transacting(trx)\n            .then(function(ids) {\n              const max = ids.reduce((max, id) => max < id ? id : max, 0);\n              return middleware\n                .raw(`ALTER SEQUENCE ${ schema.tableName }_id_seq RESTART WITH ${ max };`)\n                .then(() => ids);\n            })\n            .then(trx.commit)\n            .catch(trx.rollback);\n        });\n    } else {\n      builder = middleware(schema.tableName)\n        .insert(setParams(schema, params, reject))\n        .returning('id');\n    }\n\n    builder\n      .then(resolve)\n      .catch(error => {\n        reject(error.code === ERROR_FIND_ONE ? error : {\n          code   : ERROR_CREATE,\n          message: error.detail || error.message.split(' - ')[ 1 ]\n        });\n      });\n  });\n}"]}