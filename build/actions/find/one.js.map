{"version":3,"sources":["../../../src/actions/find/one.js"],"names":["buildFindOne","middleware","micro","plugin","schema","criteria","options","fields","sql","Promise","resolve","reject","getMyParams","manyLinks","properties","table","tableName","builder","select","getMyFields","limit","toSQL","then","result","forEach","name","split","catch","code","message","error","detail"],"mappings":";;;;;;;;;;QASgBA,Y,GAAAA,Y;;AAThB;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD;AAAA,QAASC,QAAT,uEAAoB,EAApB;AAAA,QAAwBC,OAAxB;AAAA,WACEN,aAAaC,UAAb,EAAyBG,MAAzB,EAAiCC,QAAjC,EAA2CC,OAA3C,CADF;AAAA,GADa;AAAA,C;;AAIR,SAASN,YAAT,CAAsBC,UAAtB,EAAkCG,MAAlC,EAAuF;AAAA,MAA7CC,QAA6C,uEAAlC,EAAkC;;AAAA,iFAAJ,EAAI;AAAA,MAA5BE,MAA4B,QAA5BA,MAA4B;AAAA,sBAApBC,GAAoB;AAAA,MAApBA,GAAoB,4BAAd,KAAc;;AAC5F,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA;;AACtCN,eAAWD,OAAOQ,WAAP,CAAmBP,QAAnB,CAAX;AACA,QAAMQ,YAAY,0BAAWT,OAAOU,UAAlB,CAAlB;;AAEA,QAAI,sBAAQT,QAAR,CAAJ,EAAuB;AACrB,aAAOK,QAAQ,IAAR,CAAP;AACD;;AAED,QAAMK,QAAQd,WAAWG,OAAOY,SAAlB,CAAd;AACA,QAAMC,UAAU,2CAAYF,KAAZ,EAAmBV,QAAnB,EAA6BM,MAA7B,GACbO,MADa,wCACHd,OAAOe,WAAP,CAAmBZ,MAAnB,CADG,GAEba,KAFa,CAEP,CAFO,CAAhB;;AAIA,QAAIZ,GAAJ,EAAS;AACP,aAAOE,QAAQO,QAAQI,KAAR,EAAR,CAAP;AACD;;AAEDJ,YACGK,IADH,CACQ,YAAqB;AAAA,sFAAP,EAAO;AAAA;AAAA,UAAlBC,MAAkB;;AACzB,UAAG,CAACA,MAAJ,EAAY;AACVb,gBAAQ,IAAR;AACD;;AAEDG,gBAAUW,OAAV,CAAkB,gBAAQ;AACxB,YAAIC,QAAQF,MAAZ,EAAoB;AAClBA,iBAAQE,IAAR,IAAiBF,OAAQE,IAAR,EAAeC,KAAf,CAAqB,GAArB,CAAjB;AACD;AACF,OAJD;;AAMAhB,2BAAaa,MAAb;AACD,KAbH,EAcGI,KAdH,CAcS,iBAAS;AACdhB,aAAO;AACLiB,uCADK;AAELC,iBAASC,MAAMC,MAAN,IAAgBD,MAAMD,OAAN,CAAcH,KAAd,CAAoB,KAApB,EAA4B,CAA5B;AAFpB,OAAP;AAID,KAnBH;AAoBD,GArCM,CAAP;AAsCD","file":"one.js","sourcesContent":["import isEmpty from 'lodash.isempty';\nimport setCriteria from './../../utils/set-criteria';\nimport checkArray from './../../utils/check-array';\nimport { ERROR_FIND_ONE } from './../constants';\n\nexport default (middleware, micro, plugin) =>\n  (schema, criteria = {}, options) =>\n    buildFindOne(middleware, schema, criteria, options);\n\nexport function buildFindOne(middleware, schema, criteria = {}, { fields, sql = false } = {}) {\n  return new Promise((resolve, reject) => {\n    criteria = schema.getMyParams(criteria);\n    const manyLinks = checkArray(schema.properties);\n    \n    if (isEmpty(criteria)) {\n      return resolve(null);\n    }\n    \n    const table = middleware(schema.tableName);\n    const builder = setCriteria(table, criteria, reject)\n      .select(...schema.getMyFields(fields))\n      .limit(1);\n  \n    if (sql) {\n      return resolve(builder.toSQL());\n    }\n\n    builder\n      .then(([ result ] = []) => {\n        if(!result) {\n          resolve(null);\n        }\n\n        manyLinks.forEach(name => {\n          if (name in result) {\n            result[ name ] = result[ name ].split(',');\n          }\n        });\n\n        resolve({ ...result });\n      })\n      .catch(error => {\n        reject({\n          code   : ERROR_FIND_ONE,\n          message: error.detail || error.message.split(' - ')[ 1 ]\n        });\n      });\n  });\n}"]}