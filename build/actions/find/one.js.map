{"version":3,"sources":["../../../src/actions/find/one.js"],"names":["buildFindOne","middleware","micro","plugin","schema","criteria","options","fields","sql","Promise","resolve","reject","getMyParams","table","tableName","builder","select","getMyFields","limit","toSQL","then","result","catch","code","message","error","detail","split"],"mappings":";;;;;;;;;;QAQgBA,Y,GAAAA,Y;;AARhB;;;;AACA;;;;AACA;;;;;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD;AAAA,QAASC,QAAT,uEAAoB,EAApB;AAAA,QAAwBC,OAAxB;AAAA,WACEN,aAAaC,UAAb,EAAyBG,MAAzB,EAAiCC,QAAjC,EAA2CC,OAA3C,CADF;AAAA,GADa;AAAA,C;;AAIR,SAASN,YAAT,CAAsBC,UAAtB,EAAkCG,MAAlC,EAAuF;AAAA,MAA7CC,QAA6C,uEAAlC,EAAkC;;AAAA,iFAAJ,EAAI;AAAA,MAA5BE,MAA4B,QAA5BA,MAA4B;AAAA,sBAApBC,GAAoB;AAAA,MAApBA,GAAoB,4BAAd,KAAc;;AAC5F,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA;;AACtCN,eAAWD,OAAOQ,WAAP,CAAmBP,QAAnB,CAAX;;AAEA,QAAI,sBAAQA,QAAR,CAAJ,EAAuB;AACrB,aAAOK,QAAQ,IAAR,CAAP;AACD;;AAED,QAAMG,QAAQZ,WAAWG,OAAOU,SAAlB,CAAd;AACA,QAAMC,UAAU,2CAAYF,KAAZ,EAAmBR,QAAnB,EAA6BM,MAA7B,GACbK,MADa,wCACHZ,OAAOa,WAAP,CAAmBV,MAAnB,CADG,GAEbW,KAFa,CAEP,CAFO,CAAhB;;AAIA,QAAIV,GAAJ,EAAS;AACP,aAAOE,QAAQK,QAAQI,KAAR,EAAR,CAAP;AACD;;AAEDJ,YACGK,IADH,CACQ,YAAqB;AAAA,sFAAP,EAAO;AAAA;AAAA,UAAlBC,MAAkB;;AACzBX,cAAQ,CAACW,MAAD,GAAU,IAAV,gBAAsBA,MAAtB,CAAR;AACD,KAHH,EAIGC,KAJH,CAIS,iBAAS;AACdX,aAAO;AACLY,uCADK;AAELC,iBAASC,MAAMC,MAAN,IAAgBD,MAAMD,OAAN,CAAcG,KAAd,CAAoB,KAApB,EAA4B,CAA5B;AAFpB,OAAP;AAID,KATH;AAUD,GA1BM,CAAP;AA2BD","file":"one.js","sourcesContent":["import isEmpty from 'lodash.isempty';\nimport setCriteria from './../../utils/set-criteria';\nimport { ERROR_FIND_ONE } from './../constants';\n\nexport default (middleware, micro, plugin) =>\n  (schema, criteria = {}, options) =>\n    buildFindOne(middleware, schema, criteria, options);\n\nexport function buildFindOne(middleware, schema, criteria = {}, { fields, sql = false } = {}) {\n  return new Promise((resolve, reject) => {\n    criteria = schema.getMyParams(criteria);\n    \n    if (isEmpty(criteria)) {\n      return resolve(null);\n    }\n    \n    const table = middleware(schema.tableName);\n    const builder = setCriteria(table, criteria, reject)\n      .select(...schema.getMyFields(fields))\n      .limit(1);\n  \n    if (sql) {\n      return resolve(builder.toSQL());\n    }\n\n    builder\n      .then(([ result ] = []) => {\n        resolve(!result ? null : { ...result });\n      })\n      .catch(error => {\n        reject({\n          code   : ERROR_FIND_ONE,\n          message: error.detail || error.message.split(' - ')[ 1 ]\n        });\n      });\n  });\n}"]}