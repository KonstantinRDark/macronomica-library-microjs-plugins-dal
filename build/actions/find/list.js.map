{"version":3,"sources":["../../../src/actions/find/list.js"],"names":["buildFindList","middleware","micro","plugin","schema","criteria","options","sql","fields","sort","limit","offset","Promise","resolve","reject","builder","tableName","getMyParams","select","getMyFields","orderKey","orderDirection","split","length","includes","toLowerCase","orderBy","toSQL","then","result","map","row","catch","code","message","error","detail"],"mappings":";;;;;;;;QASgBA,a,GAAAA,a;;AAThB;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD;AAAA,QAASC,QAAT,uEAAoB,EAApB;AAAA,QAAwBC,OAAxB;AAAA,WACEN,cAAcC,UAAd,EAA0BG,MAA1B,EAAkCC,QAAlC,EAA4CC,OAA5C,CADF;AAAA,GADa;AAAA,C;;AAIR,SAASN,aAAT,CAAuBC,UAAvB,EAAmCG,MAAnC,EAAwE;AAAA,MAA7BC,QAA6B,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,qBAOzEA,OAPyE,CAE3EC,GAF2E;AAAA,MAE3EA,GAF2E,gCAErE,KAFqE;AAAA,MAG3EC,MAH2E,GAOzEF,OAPyE,CAG3EE,MAH2E;AAAA,sBAOzEF,OAPyE,CAI3EG,IAJ2E;AAAA,MAI3EA,IAJ2E,iCAIpE,IAJoE;AAAA,MAK3EC,KAL2E,GAOzEJ,OAPyE,CAK3EI,KAL2E;AAAA,MAM3EC,MAN2E,GAOzEL,OAPyE,CAM3EK,MAN2E;;;AAS7E,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA;;AACtC,QAAIC,UAAU,2CACZd,WAAWG,OAAOY,SAAlB,CADY,EAEZZ,OAAOa,WAAP,CAAmBZ,QAAnB,CAFY,EAGZS,MAHY,GAIZI,MAJY,wCAIFd,OAAOe,WAAP,CAAmBX,MAAnB,CAJE,EAAd;;AAMA,QAAIC,IAAJ,EAAU;AACR,UAAIW,iBAAJ;AACA,UAAIC,uBAAJ;;AAEA,UAAI,sBAASZ,IAAT,CAAJ,EAAoB;AAClBA,eAAOA,KAAKa,KAAL,CAAW,GAAX,CAAP;;AAEA,YAAIb,KAAKc,MAAL,KAAgB,CAApB,EAAuB;AACrBH,qBAAWX,KAAM,CAAN,CAAX;AACAY,2BAAiB,CAAE,KAAF,EAAS,MAAT,EAAkBG,QAAlB,CAA2Bf,KAAM,CAAN,EAAUgB,WAAV,EAA3B,IACbhB,KAAM,CAAN,EAAUgB,WAAV,EADa,GAEb,KAFJ;AAGD,SALD,MAKO;AACLL,qBAAWX,IAAX;AACAY,2BAAiB,KAAjB;AACD;AACF;;AAED,UAAID,YAAYC,cAAhB,EAAgC;AAC9BN,kBAAUA,QAAQW,OAAR,CAAgBN,QAAhB,EAA0BC,cAA1B,CAAV;AACD;AACF;;AAED,QAAIX,SAAS,wBAASA,KAAT,CAAb,EAA8B;AAC5BK,gBAAUA,QAAQL,KAAR,CAAcA,KAAd,CAAV;AACD;;AAED,QAAIC,UAAU,wBAASA,MAAT,CAAd,EAAgC;AAC9BI,gBAAUA,QAAQJ,MAAR,CAAeA,MAAf,CAAV;AACD;;AAED,QAAIJ,GAAJ,EAAS;AACPM,cAAQE,QAAQY,KAAR,EAAR;AACD,KAFD,MAEO;AACLZ,cACGa,IADH,CACQ;AAAA,YAACC,MAAD,uEAAU,EAAV;AAAA,eAAiBhB,QAAQgB,OAAOC,GAAP,CAAW;AAAA,8BAAaC,GAAb;AAAA,SAAX,CAAR,CAAjB;AAAA,OADR,EAEGC,KAFH,CAES,iBAAS;AACdlB,eAAO;AACLmB,0CADK;AAELC,mBAASC,MAAMC,MAAN,IAAgBD,MAAMD,OAAN,CAAcZ,KAAd,CAAoB,KAApB,EAA4B,CAA5B;AAFpB,SAAP;AAID,OAPH;AAQD;AACF,GAlDM,CAAP;AAmDD","file":"list.js","sourcesContent":["import isString from 'lodash.isstring';\nimport isNumber from './../../utils/is-number';\nimport setCriteria from './../../utils/set-criteria';\nimport {ERROR_FIND_LIST} from './../constants';\n\nexport default (middleware, micro, plugin) =>\n  (schema, criteria = {}, options) =>\n    buildFindList(middleware, schema, criteria, options);\n\nexport function buildFindList(middleware, schema, criteria = {}, options = {}) {\n  let {\n    sql = false,\n    fields,\n    sort = 'id',\n    limit,\n    offset,\n  } = options;\n\n  return new Promise((resolve, reject) => {\n    let builder = setCriteria(\n      middleware(schema.tableName),\n      schema.getMyParams(criteria),\n      reject\n    ).select(...schema.getMyFields(fields));\n\n    if (sort) {\n      let orderKey;\n      let orderDirection;\n\n      if (isString(sort)) {\n        sort = sort.split(' ');\n\n        if (sort.length === 2) {\n          orderKey = sort[ 0 ];\n          orderDirection = [ 'asc', 'desc' ].includes(sort[ 1 ].toLowerCase())\n            ? sort[ 1 ].toLowerCase()\n            : 'asc';\n        } else {\n          orderKey = sort;\n          orderDirection = 'asc';\n        }\n      }\n\n      if (orderKey && orderDirection) {\n        builder = builder.orderBy(orderKey, orderDirection);\n      }\n    }\n\n    if (limit && isNumber(limit)) {\n      builder = builder.limit(limit);\n    }\n\n    if (offset && isNumber(offset)) {\n      builder = builder.offset(offset);\n    }\n\n    if (sql) {\n      resolve(builder.toSQL());\n    } else {\n      builder\n        .then((result = []) => resolve(result.map(row => ({ ...row }))))\n        .catch(error => {\n          reject({\n            code   : ERROR_FIND_LIST,\n            message: error.detail || error.message.split(' - ')[ 1 ]\n          });\n        });\n    }\n  });\n}"]}