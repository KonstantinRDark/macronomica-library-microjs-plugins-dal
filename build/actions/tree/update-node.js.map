{"version":3,"sources":["../../../src/actions/tree/update-node.js"],"names":["buildUpdateTreeNode","middleware","micro","plugin","schema","params","options","criteria","id","parentId","Promise","reject","code","message","isFinite","fields","then","node","all","updated","catch","console","error"],"mappings":";;;;;QASgBA,mB,GAAAA,mB;;AAThB;;AACA;;AACA;;;;AACA;;;;;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB;AAAA,WACEN,oBAAoBC,UAApB,EAAgCG,MAAhC,EAAwCC,MAAxC,EAAgDC,OAAhD,CADF;AAAA,GADa;AAAA,C;;AAIR,SAASN,mBAAT,CAA6BC,UAA7B,EAAyCG,MAAzC,EAA2F;AAAA,MAA1CG,QAA0C,uEAA/B,EAA+B;AAAA,MAA3BF,MAA2B,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,MACxFE,EADwF,GACjFD,QADiF,CACxFC,EADwF;AAAA,MAExFC,QAFwF,GAE3EJ,MAF2E,CAExFI,QAFwF;;;AAIhG,MAAI,CAACD,EAAL,EAAS;AACP,WAAOE,QAAQC,MAAR,CAAe;AACpBC,YAAS,4DADW;AAEpBC,eAAS;AAFW,KAAf,CAAP;AAID;;AAED;AACA,MAAI,CAACJ,QAAD,IAAa,CAACK,SAAS,CAACL,QAAV,CAAlB,EAAuC;AACrC,WAAO,yBAAYR,UAAZ,EAAwBG,MAAxB,EAAgC,EAAEI,MAAF,EAAhC,EAAwCH,MAAxC,EAAgDC,OAAhD,CAAP;AACD;;AAED,SAAO,uBAAaL,UAAb,EAAyBG,MAAzB,EAAiC,EAAEI,MAAF,EAAjC,EAAyC,EAAEO,QAAQ,CAAE,IAAF,EAAQ,UAAR,CAAV,EAAzC,EACJC,IADI,CACC,gBAAQ;AACZ,QAAI,CAACC,IAAL,EAAW;AACT,aAAOA,IAAP;AACD;;AAED,WAAO,yBAAYhB,UAAZ,EAAwBG,MAAxB,EAAgC,EAAEI,MAAF,EAAhC,EAAwCH,MAAxC,EAAgDC,OAAhD,EACJU,IADI,CACC,mBAAW;AACf;AACA,UAAIC,KAAKR,QAAL,KAAkB,CAACA,QAAvB,EAAiC;AAC/B,eAAOC,QACJQ,GADI,CACA;AACH;AACA,yCAAkBjB,UAAlB,EAA8BG,MAA9B,EAAsCa,KAAKR,QAA3C,CAFG;AAGH;AACA,0CAAmBR,UAAnB,EAA+BG,MAA/B,EAAuCK,QAAvC,CAJG,CADA,EAOJO,IAPI,CAOC;AAAA,iBAAMG,OAAN;AAAA,SAPD,EAQJC,KARI,CAQE,iBAAS;AACdC,kBAAQC,KAAR,CAAcA,KAAd;AACD,SAVI,CAAP;AAWD;;AAED,aAAOH,OAAP;AACD,KAlBI,CAAP;AAmBD,GAzBI,CAAP;AA0BD","file":"update-node.js","sourcesContent":["import {buildUpdate} from './../update';\nimport {buildFindOne} from './../find/one';\nimport setParentLeafTrue from './utils/set-parent-leaf-true';\nimport setParentLeafFalse from './utils/set-parent-leaf-false';\n\nexport default (middleware, micro, plugin) =>\n  (schema, params, options) =>\n    buildUpdateTreeNode(middleware, schema, params, options);\n\nexport function buildUpdateTreeNode(middleware, schema, criteria = {}, params = {}, options = {}) {\n  const { id } = criteria;\n  const { parentId } = params;\n\n  if (!id) {\n    return Promise.reject({\n      code   : 'error.plugin.rest-tree/update-node.id.property.is.required',\n      message: 'Для обновления свойство \"id\" обязательно'\n    });\n  }\n\n  // Если не передали parentId - дальнейшая логика излишняя\n  if (!parentId || !isFinite(+parentId)) {\n    return buildUpdate(middleware, schema, { id }, params, options);\n  }\n\n  return buildFindOne(middleware, schema, { id }, { fields: [ 'id', 'parentId' ] })\n    .then(node => {\n      if (!node) {\n        return node;\n      }\n\n      return buildUpdate(middleware, schema, { id }, params, options)\n        .then(updated => {\n          // Если новый parentId не равен старому\n          if (node.parentId !== +parentId) {\n            return Promise\n              .all([\n                // Проверить остались ли у родителя дети, если нет - заменить ему leaf на true\n                setParentLeafTrue(middleware, schema, node.parentId),\n                // Заменить текущему родителю leaf на false если это первый его ребенок\n                setParentLeafFalse(middleware, schema, parentId)\n              ])\n              .then(() => updated)\n              .catch(error => {\n                console.error(error);\n              });\n          }\n\n          return updated;\n        });\n    });\n}"]}