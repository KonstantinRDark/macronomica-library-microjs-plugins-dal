{"version":3,"sources":["../../../src/actions/tree/remove-node.js"],"names":["buildRemoveTreeNode","middleware","micro","plugin","schema","criteria","options","id","Promise","reject","code","message","fields","then","node","removedRows","parentId","result"],"mappings":";;;;;QASgBA,mB,GAAAA,mB;;AAThB;;AACA;;AACA;;AACA;;;;;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD,EAASC,QAAT,EAAmBC,OAAnB;AAAA,WACEN,oBAAoBC,UAApB,EAAgCG,MAAhC,EAAwCC,QAAxC,EAAkDC,OAAlD,CADF;AAAA,GADa;AAAA,C;;AAIR,SAASN,mBAAT,CAA8BC,UAA9B,EAA0CG,MAA1C,EAA+E;AAAA,MAA7BC,QAA6B,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,MAC5EC,EAD4E,GACrEF,QADqE,CAC5EE,EAD4E;;;AAGpF,MAAI,CAACA,EAAL,EAAS;AACP,WAAOC,QAAQC,MAAR,CAAe;AACpBC,YAAS,sDADW;AAEpBC,eAAS;AAFW,KAAf,CAAP;AAID;;AAED;AACA,SAAO,uBAAaV,UAAb,EAAyBG,MAAzB,EAAiC,EAAEG,MAAF,EAAjC,EAAyC,EAAEK,QAAQ,CAAE,IAAF,EAAQ,UAAR,EAAoB,MAApB,CAAV,EAAzC,EACJC,IADI,CACC,gBAAQ;AACZ,QAAI,CAACC,IAAL,EAAW;AACT,aAAOA,IAAP;AACD;;AAED;AACA,WAAO,yBAAYb,UAAZ,EAAwBG,MAAxB,EAAgC,EAAEG,MAAF,EAAhC,EAAwCD,OAAxC,EACJO,IADI,CACC,uBAAe;AACnB,UAAIE,WAAJ,EAAiB;AACf,eAAO,yBAAYd,UAAZ,EAAwBG,MAAxB,EAAgC,EAAEY,UAAUT,EAAZ,EAAhC,EAAkD,EAAES,UAAUF,KAAKE,QAAjB,EAAlD,EAA+EV,OAA/E,CAAP;AACD;;AAED,aAAOS,WAAP;AACD,KAPI;AAQL;AARK,KASJF,IATI,CASC;AAAA,aAAU,iCAAkBZ,UAAlB,EAA8BG,MAA9B,EAAsCU,KAAKE,QAA3C,EACbH,IADa,CACR;AAAA,eAAMI,MAAN;AAAA,OADQ,CAAV;AAAA,KATD,CAAP;AAYD,GAnBI,CAAP;AAoBD","file":"remove-node.js","sourcesContent":["import {buildFindOne} from './../find/one';\nimport {buildUpdate} from './../update';\nimport {buildRemove} from './../remove';\nimport setParentLeafTrue from './utils/set-parent-leaf-true';\n\nexport default (middleware, micro, plugin) =>\n  (schema, criteria, options) =>\n    buildRemoveTreeNode(middleware, schema, criteria, options);\n\nexport function buildRemoveTreeNode (middleware, schema, criteria = {}, options = {}) {\n  const { id } = criteria;\n\n  if (!id) {\n    return Promise.reject({\n      code   : 'error.plugin.dal/remove-node.id.property.is.required',\n      message: 'Для удаления свойство \"id\" обязательно'\n    });\n  }\n\n  // Сначала получить свои id и parentId\n  return buildFindOne(middleware, schema, { id }, { fields: [ 'id', 'parentId', 'leaf' ] })\n    .then(node => {\n      if (!node) {\n        return node;\n      }\n\n      // Удаляем себя\n      return buildRemove(middleware, schema, { id }, options)\n        .then(removedRows => {\n          if (removedRows) {\n            return buildUpdate(middleware, schema, { parentId: id }, { parentId: node.parentId }, options);\n          }\n\n          return removedRows;\n        })\n        // Проверить остались ли у родителя дети если нет - заменить ему leaf на true\n        .then(result => setParentLeafTrue(middleware, schema, node.parentId)\n          .then(() => result)\n        );\n    });\n}"]}