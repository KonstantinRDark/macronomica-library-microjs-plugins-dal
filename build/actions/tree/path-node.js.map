{"version":3,"sources":["../../../src/actions/tree/path-node.js"],"names":["buildPathTreeNode","middleware","micro","plugin","schema","params","options","childrenPath","id","parents","then","parentId","parent","push","criteria","Promise","resolve","fields","sort","a","b"],"mappings":";;;;;QA0BgBA,iB,GAAAA,iB;;AA1BhB;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB;AAAA,WACEN,kBAAkBC,UAAlB,EAA8BG,MAA9B,EAAsCC,MAAtC,EAA8CC,OAA9C,CADF;AAAA,GADa;AAAA,C;;AAIf;AACA;AACA;;;AACA,IAAMC,eAAe,SAAfA,YAAe,CAACN,UAAD,EAAaG,MAAb,EAAiD;AAAA,MAA5BI,EAA4B,uEAAvB,IAAuB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AACpE,SAAO,uBAAaR,UAAb,EAAyBG,MAAzB,EAAiC,EAAEI,MAAF,EAAjC,EACJE,IADI,CACC,kBAAU;AAAA,QACNC,QADM,GACOC,MADP,CACND,QADM;;;AAGdF,YAAQI,IAAR,CAAaD,MAAb;;AAEA;AACA,QAAI,CAACD,QAAL,EAAe;AACb,aAAOF,OAAP;AACD;;AAED;AACA,WAAOF,aAAaN,UAAb,EAAyBG,MAAzB,EAAiCO,QAAjC,EAA2CF,OAA3C,CAAP;AACD,GAbI,CAAP;AAcD,CAfD;;AAiBO,SAAST,iBAAT,CAA2BC,UAA3B,EAAuCG,MAAvC,EAA4E;AAAA,MAA7BU,QAA6B,uEAAlB,EAAkB;AAAA,MAAdR,OAAc,uEAAJ,EAAI;AAAA,MACzEE,EADyE,GAClEM,QADkE,CACzEN,EADyE;;AAEjF,MAAMC,UAAU,EAAhB;;AAEA,MAAI,CAACD,EAAL,EAAS;AACP,WAAOO,QAAQC,OAAR,CAAgBP,OAAhB,CAAP;AACD;;AAED;AACA,SAAO,uBAAaR,UAAb,EAAyBG,MAAzB,EAAiC,EAAEI,MAAF,EAAjC,EAAyC,EAAES,QAAQ,CAAE,IAAF,EAAQ,UAAR,CAAV,EAAzC,EACJP,IADI,CACC,kBAAU;AAAA,QACNC,QADM,GACOC,MADP,CACND,QADM;;AAGd;;AACA,QAAI,CAACA,QAAL,EAAe;AACb,aAAOF,OAAP;AACD;;AAED;AACA,WAAOF,aAAaN,UAAb,EAAyBG,MAAzB,EAAiCO,QAAjC,EAA2CF,OAA3C,CAAP;AACD,GAXI,EAYJC,IAZI,CAYC;AAAA,WAAWD,QAAQS,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,EAAEX,EAAF,GAAOY,EAAEZ,EAAnB;AAAA,KAAb,CAAX;AAAA,GAZD,CAAP;AAaD","file":"path-node.js","sourcesContent":["import {buildFindOne} from './../find/one';\n\nexport default (middleware, micro, plugin) =>\n  (schema, params, options) =>\n    buildPathTreeNode(middleware, schema, params, options);\n\n// Загружаем одну ноду по Id\n// Если нет parentId возвращаем родителей\n// Иначе вызовем этот метод с id == parentId\nconst childrenPath = (middleware, schema, id = null, parents = []) => {\n  return buildFindOne(middleware, schema, { id })\n    .then(parent => {\n      const { parentId } = parent;\n\n      parents.push(parent);\n\n      // Если нет родителя - вернем список загруженных родителей\n      if (!parentId) {\n        return parents;\n      }\n\n      // Иначе запустим загрузку родителя\n      return childrenPath(middleware, schema, parentId, parents);\n    });\n};\n\nexport function buildPathTreeNode(middleware, schema, criteria = {}, options = {}) {\n  const { id } = criteria;\n  const parents = [];\n\n  if (!id) {\n    return Promise.resolve(parents);\n  }\n\n  // Загружаем себя\n  return buildFindOne(middleware, schema, { id }, { fields: [ 'id', 'parentId' ] })\n    .then(parent => {\n      const { parentId } = parent;\n\n      // Если нет родителей - вернем пустой массив родителей\n      if (!parentId) {\n        return parents;\n      }\n\n      // Иначе запустим загрузку родителей\n      return childrenPath(middleware, schema, parentId, parents);\n    })\n    .then(parents => parents.sort((a, b) => a.id - b.id));\n}"]}