{"version":3,"sources":["../../src/actions/update.js"],"names":["buildUpdate","middleware","micro","plugin","schema","criteria","params","options","Promise","resolve","reject","getMyParams","table","tableName","builder","update","returning","then","count","catch","error","code","message","detail","split"],"mappings":";;;;;QAUgBA,W,GAAAA,W;;AAVhB;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;kBAEe,UAACC,UAAD,EAAaC,KAAb,EAAoBC,MAApB;AAAA,SACb,UAACC,MAAD,EAASC,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B;AAAA,WACEP,YAAYC,UAAZ,EAAwBG,MAAxB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkDC,OAAlD,CADF;AAAA,GADa;AAAA,C;;AAIR,SAASP,WAAT,CAAsBC,UAAtB,EAAkCG,MAAlC,EAAoF;AAAA,MAA1CC,QAA0C,uEAA/B,EAA+B;AAAA,MAA3BC,MAA2B,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACzF,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,eAAWD,OAAOO,WAAP,CAAmBN,QAAnB,CAAX;;AAEA,QAAI,sBAAQA,QAAR,CAAJ,EAAuB;AACrB,aAAOI,QAAQ,IAAR,CAAP;AACD;;AAED,QAAMG,QAAQX,WAAWG,OAAOS,SAAlB,CAAd;AACA,QAAMC,UAAU,2BAAYF,KAAZ,EAAmBP,QAAnB,EAA6BK,MAA7B,EACbK,MADa,CACN,yBAAUX,MAAV,EAAkBE,MAAlB,EAA0BI,MAA1B,CADM,EAEbM,SAFa,CAEH,IAFG,CAAhB;;AAIA;AACA,2BAAWf,UAAX,EAAuBG,MAAvB,EAA+BC,QAA/B,EACGY,IADH,CACQ,gBAAe;AAAA,UAAZC,KAAY,QAAZA,KAAY;;AACnB;AACA,UAAIA,UAAU,CAAd,EAAiB;AACf,eAAO,IAAP;AACD;;AAED,aAAOJ,QACJK,KADI,CACE,iBAAS;AACdT,eAAOU,MAAMC,IAAN,iCAAgCD,KAAhC,GAAwC;AAC7CC,uCAD6C;AAE7CC,mBAASF,MAAMG,MAAN,IAAgBH,MAAME,OAAN,CAAcE,KAAd,CAAoB,KAApB,EAA4B,CAA5B;AAFoB,SAA/C;AAID,OANI,CAAP;AAOD,KAdH,EAeGP,IAfH,CAeQR,OAfR,EAgBGU,KAhBH,CAgBST,MAhBT;AAiBD,GA9BM,CAAP;AA+BD","file":"update.js","sourcesContent":["import isEmpty from 'lodash.isempty';\nimport setCriteria from './../utils/set-criteria';\nimport setParams from './../utils/set-params';\nimport { buildCount } from './count';\nimport { ERROR_UPDATE, ERROR_FIND_ONE } from './constants';\n\nexport default (middleware, micro, plugin) =>\n  (schema, criteria, params, options) =>\n    buildUpdate(middleware, schema, criteria, params, options);\n\nexport function buildUpdate (middleware, schema, criteria = {}, params = {}, options = {}) {\n  return new Promise((resolve, reject) => {\n    criteria = schema.getMyParams(criteria);\n\n    if (isEmpty(criteria)) {\n      return resolve(null);\n    }\n\n    const table = middleware(schema.tableName);\n    const builder = setCriteria(table, criteria, reject)\n      .update(setParams(schema, params, reject))\n      .returning('id');\n\n    // Узнаем кол-во обновляемых строк\n    buildCount(middleware, schema, criteria)\n      .then(({ count }) => {\n        // Если равно 0 - то и обновлять не стоит\n        if (count === 0) {\n          return null;\n        }\n\n        return builder\n          .catch(error => {\n            reject(error.code === ERROR_FIND_ONE ? error : {\n              code   : ERROR_UPDATE,\n              message: error.detail || error.message.split(' - ')[ 1 ]\n            });\n          });\n      })\n      .then(resolve)\n      .catch(reject);\n  });\n}"]}