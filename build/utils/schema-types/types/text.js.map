{"version":3,"sources":["../../../../src/utils/schema-types/types/text.js"],"names":["entities","value","convertIn","convertOut","schema","schemaValidate","options","string","format","other","encode","decode"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;AAEA,MAAMA,WAAW,+BAAjB;;kBAEe;AACbC,SAAQ,MADK;AAEbC,WAFa;AAGbC,YAHa;AAIbC,UAAQ,sBAAQC,cAAR;AAJK,C;;;AAOf,SAASA,cAAT,GAAuD;AAAA,MAA/BC,OAA+B,uEAArB,sBAAc,IAAd,CAAqB;;AACrD,MAAIF,SAAS,cAAIG,MAAJ,EAAb;;AAEA,SAAO,+BAAgBD,OAAhB,EAAyBF,MAAzB,EAAiC,CACtC,0BADsC,8CAAjC,CAAP;AAKD;;AAED,SAASF,SAAT,CAAmBD,KAAnB,EAA8D;AAAA,iFAAJ,EAAI;AAAA,yBAAlCO,MAAkC;;AAAA,MAAlCA,MAAkC,+BAAzB,MAAyB;AAAA,MAAdC,KAAc;;AAC5D,MAAI,CAAC,sBAASR,KAAT,CAAL,EAAsB;AACpB,WAAOA,KAAP;AACD;;AAED,UAAQO,MAAR;AACE,SAAK,MAAL;AACE,aAAO,yBAAUP,KAAV,CAAP;AACF,SAAK,MAAL;AACE,aAAOD,SAASU,MAAT,CAAgBT,KAAhB,CAAP;AACF;AAAS,aAAOA,KAAP;AALX;AAOD;;AAED,SAASE,UAAT,CAAoBF,KAApB,EAA+D;AAAA,kFAAJ,EAAI;AAAA,2BAAlCO,MAAkC;;AAAA,MAAlCA,MAAkC,gCAAzB,MAAyB;AAAA,MAAdC,KAAc;;AAC7D,MAAI,CAAC,sBAASR,KAAT,CAAL,EAAsB;AACpB,WAAOA,KAAP;AACD;;AAED,UAAQO,MAAR;AACE,SAAK,MAAL;AAAa,aAAOR,SAASW,MAAT,CAAgBV,KAAhB,CAAP;AACb;AAAS,aAAOA,KAAP;AAFX;AAID","file":"text.js","sourcesContent":["import Joi from 'joi';\nimport memoize from 'lodash.memoize';\nimport isString from 'lodash.isstring';\nimport { XmlEntities } from 'html-entities';\nimport striptags from 'striptags';\nimport applyValidators from '../utils/apply-validators';\nimport setDefault from '../utils/validators/set-default';\nimport setMinMax from '../utils/validators/set-min-max';\nimport setRequired from '../utils/validators/set-required';\n// Можно посмотреть на: https://github.com/punkave/sanitize-html\n\nconst entities = new XmlEntities();\n\nexport default {\n  value : 'text',\n  convertIn,\n  convertOut,\n  schema: memoize(schemaValidate)\n};\n\nfunction schemaValidate(options = Object.create(null)) {\n  let schema = Joi.string();\n\n  return applyValidators(options, schema, [\n    setMinMax(),\n    setDefault,\n    setRequired\n  ]);\n}\n\nfunction convertIn(value, { format = 'text', ...other } = {}) {\n  if (!isString(value)) {\n    return value;\n  }\n\n  switch (format) {\n    case 'text':\n      return striptags(value);\n    case 'html':\n      return entities.encode(value);\n    default: return value;\n  }\n}\n\nfunction convertOut(value, { format = 'text', ...other } = {}) {\n  if (!isString(value)) {\n    return value;\n  }\n\n  switch (format) {\n    case 'html': return entities.decode(value);\n    default: return value;\n  }\n}"]}