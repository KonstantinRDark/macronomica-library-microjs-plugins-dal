{"version":3,"sources":["../../../../src/utils/schema-types/types/array.js"],"names":["value","convertIn","convertOut","schema","schemaValidate","options","Object","create","string","Array","isArray","result","reduce","filterIterator","join","undefined","split","map","id","raw","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe;AACbA,SAAQ,OADK;AAEbC,WAFa;AAGbC,YAHa;AAIbC,UAAQ,sBAAQC,cAAR;AAJK,C;;;AAOf,SAASA,cAAT,GAAuD;AAAA,MAA/BC,OAA+B,uEAArBC,OAAOC,MAAP,CAAc,IAAd,CAAqB;;AACrD,MAAIJ,SAAS,cAAIK,MAAJ,EAAb;;AAEA,SAAO,+BAAgBH,OAAhB,EAAyBF,MAAzB,EAAiC,6CAAjC,CAAP;AAID;;AAED,SAASF,SAAT,CAAmBD,KAAnB,EAA0B;AACxB,MAAIS,MAAMC,OAAN,CAAcV,KAAd,CAAJ,EAA0B;AACxB,QAAIW,SAASX,MAAMY,MAAN,CAAaC,cAAb,EAA6B,EAA7B,EAAiCC,IAAjC,CAAsC,GAAtC,CAAb;;AAEA,QAAI,sBAASH,MAAT,KAAoBA,WAAW,EAAnC,EAAuC;AACrCA,eAAS,IAAT;AACD;;AAED,WAAOA,MAAP;AACD;;AAED,SAAOX,KAAP;AACD;;AAED,SAASE,UAAT,CAAoBF,KAApB,EAA2B;AACzB,MAAI,sBAASA,KAAT,CAAJ,EAAqB;AACnB,WAAOA,UAAU,EAAV,GAAee,SAAf,GAA2Bf,MAAMgB,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAAM,CAACA,EAA5B,CAAlC;AACD;;AAED,SAAOlB,KAAP;AACD;;AAED,SAASa,cAAT,GAA0C;AAAA,MAAlBF,MAAkB,uEAAT,EAAS;AAAA,MAALQ,GAAK;;AACxC,MAAI,CAAC,CAACA,GAAF,IAAS,OAAOA,GAAP,IAAc,QAA3B,EAAqC;AACnCA,UAAMA,IAAID,EAAV;AACD;;AAED,MAAI,sBAASC,GAAT,CAAJ,EAAmB;AACjBR,WAAOS,IAAP,CAAYD,GAAZ;AACD;;AAED,SAAOR,MAAP;AACD","file":"array.js","sourcesContent":["import Joi from 'joi';\nimport memoize from 'lodash.memoize';\nimport isString from 'lodash.isstring';\nimport applyValidators from '../utils/apply-validators';\nimport setDefault from '../utils/validators/set-default';\nimport setRequired from '../utils/validators/set-required';\nimport isNumber from 'lodash.isnumber';\n\nexport default {\n  value : 'array',\n  convertIn,\n  convertOut,\n  schema: memoize(schemaValidate)\n};\n\nfunction schemaValidate(options = Object.create(null)) {\n  let schema = Joi.string();\n\n  return applyValidators(options, schema, [\n    setDefault,\n    setRequired\n  ]);\n}\n\nfunction convertIn(value) {\n  if (Array.isArray(value)) {\n    let result = value.reduce(filterIterator, []).join(',');\n\n    if (isString(result) && result === '') {\n      result = null;\n    }\n\n    return result;\n  }\n\n  return value;\n}\n\nfunction convertOut(value) {\n  if (isString(value)) {\n    return value === '' ? undefined : value.split(',').map(id => +id);\n  }\n\n  return value;\n}\n\nfunction filterIterator(result = [], raw) {\n  if (!!raw && typeof raw == 'object') {\n    raw = raw.id;\n  }\n\n  if (isNumber(raw)) {\n    result.push(raw);\n  }\n\n  return result;\n}"]}