{"version":3,"sources":["../../../../src/utils/schema-types/types/string.js"],"names":["value","schema","schemaValidate","options","string","truncate","length","max","Array","isArray","enum","valid","insensitive","reduce","name"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe;AACbA,SAAQ,QADK;AAEbC,UAAQ,sBAAQC,cAAR;AAFK,C;;;AAKf,SAASA,cAAT,GAAuD;AAAA,MAA/BC,OAA+B,uEAArB,sBAAc,IAAd,CAAqB;;AACrD,MAAIF,SAAS,cAAIG,MAAJ,EAAb;;AADqD,QAG7CC,QAH6C,GAGnBF,OAHmB,CAG7CE,QAH6C;AAAA,QAGnCC,MAHmC,GAGnBH,OAHmB,CAGnCG,MAHmC;AAAA,QAG3BC,GAH2B,GAGnBJ,OAHmB,CAG3BI,GAH2B;;;AAKrD,MAAI,YAAYJ,OAAZ,IAAuB,sBAASG,MAAT,CAAvB,IAA2CA,UAAU,CAAzD,EAA4D;AAC1DL,aAASA,OAAOK,MAAP,CAAc,CAACA,MAAf,EAAuB,MAAvB,CAAT;AACD,GAFD,MAEO;AACLL,aAAS,2BAAYE,OAAZ,EAAqBF,MAArB,CAAT;;AAEA,QAAI,SAASE,OAAT,IAAoB,sBAASI,GAAT,CAAxB,EAAuC;AACrC,UAAI,cAAcJ,OAAd,IAAyBE,aAAa,IAA1C,EAAgD;AAC9CJ,iBAASA,OAAOI,QAAP,EAAT;AACD;AACF;AACF;;AAED,MAAI,UAAUF,OAAV,IAAqBK,MAAMC,OAAN,CAAcN,QAAQO,IAAtB,CAAzB,EAAsD;AACpDT,aAASA,OAAOU,KAAP,CAAaR,QAAQO,IAArB,EAA2BE,WAA3B,EAAT;AACD;;AAEDX,WAAS,CAAE,MAAF,EAAU,WAAV,EAAuB,WAAvB,EAAqCY,MAArC,CAA4C,CAACZ,MAAD,EAASa,IAAT,KAAkB;AACrE,QAAIA,QAAQX,OAAR,IAAmBA,QAASW,IAAT,MAAoB,IAA3C,EAAiD;AAC/Cb,eAASA,OAAQa,IAAR,GAAT;AACD;AACD,WAAOb,MAAP;AACD,GALQ,EAKNA,MALM,CAAT;;AAOA,SAAO,+BAAgBE,OAAhB,EAAyBF,MAAzB,EAAiC,6CAAjC,CAAP;AAID","file":"string.js","sourcesContent":["import Joi from 'joi';\nimport memoize from 'lodash.memoize';\nimport applyValidators from '../utils/apply-validators';\nimport setDefault from '../utils/validators/set-default';\nimport setMinMax from '../utils/validators/set-min-max';\nimport setRequired from '../utils/validators/set-required';\nimport isNumber from 'lodash.isnumber';\n\nexport default {\n  value : 'string',\n  schema: memoize(schemaValidate)\n};\n\nfunction schemaValidate(options = Object.create(null)) {\n  let schema = Joi.string();\n\n  const { truncate, length, max } = options;\n\n  if ('length' in options && isNumber(length) && length >= 0) {\n    schema = schema.length(+length, 'utf8');\n  } else {\n    schema = setMinMax()(options, schema);\n\n    if ('max' in options && isNumber(max)) {\n      if ('truncate' in options && truncate === true) {\n        schema = schema.truncate();\n      }\n    }\n  }\n\n  if ('enum' in options && Array.isArray(options.enum)) {\n    schema = schema.valid(options.enum).insensitive();\n  }\n\n  schema = [ 'trim', 'lowercase', 'uppercase' ].reduce((schema, name) => {\n    if (name in options && options[ name ] === true) {\n      schema = schema[ name ]();\n    }\n    return schema;\n  }, schema);\n\n  return applyValidators(options, schema, [\n    setDefault,\n    setRequired\n  ]);\n}"]}