{"version":3,"sources":["../../src/utils/schema-types.js"],"names":["MIN_SMALLINT","MIN_INTEGER","MIN_BIGINT","MIN_MONEY","MAX_SMALLINT","MAX_INTEGER","MAX_BIGINT","MAX_MONEY","setDefault","options","schema","default","validate","error","setRequired","required","setMinMax","defaults","defaultMin","min","defaultMax","max","hasMin","hasMax","applyValidators","validators","reduce","validator","boolean","value","Object","create","number","integer","positive","smallint","float","defaultLimitMin","defaultLimitMax","defaultLimit","limit","precision","money","string","truncate","length","Array","isArray","enum","valid","insensitive","name","text","datetime","date","iso"],"mappings":"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","file":"schema-types.js","sourcesContent":["import Joi from 'joi';\nimport memoize from 'lodash.memoize';\nimport isFunction from 'lodash.isfunction';\nimport isNumber from './is-number';\n\nconst MIN_SMALLINT = -32768;\nconst MIN_INTEGER = -2147483648;\nconst MIN_BIGINT = -9223372036854775808;\nconst MIN_MONEY = -92233720368547758.08;\n\nconst MAX_SMALLINT = 32767;\nconst MAX_INTEGER = 2147483647;\nconst MAX_BIGINT = 9223372036854775807;\nconst MAX_MONEY = 92233720368547758.07;\n\nfunction setDefault(options, schema) {\n\n  if ('default' in options) {\n    if (isFunction(options.default) || !Joi.validate(options.default, schema).error) {\n      schema = schema.default(options.default);\n    }\n  }\n\n  return schema;\n}\n\nfunction setRequired(options, schema) {\n  let { required } = options;\n\n  if ('required' in options && options.required === true) {\n    schema = schema.required();\n  }\n\n  return schema;\n}\n\nfunction setMinMax(defaults = {}) {\n  return (options, schema) => {\n    const { min:defaultMin, max:defaultMax } = defaults;\n    let { min = defaultMin, max = defaultMax } = options;\n    const hasMin = isNumber(min);\n    const hasMax = isNumber(max);\n\n    if (hasMin) {\n      if (min < defaultMin) { min = defaultMin }\n      if (hasMax && min > max) { min = max }\n      schema = schema.min(+min);\n    }\n\n    if (hasMax) {\n      if (max > defaultMax) { max = defaultMax }\n      if (hasMin && max < min) { max = min }\n      schema = schema.max(+max);\n    }\n\n    return schema;\n  };\n}\n\nfunction applyValidators(options, schema, validators) {\n  return validators.reduce((schema, validator) => validator(options, schema), schema);\n}\n\nexport default {\n  get boolean() {\n    return {\n      value : 'boolean',\n      schema: memoize((options = Object.create(null)) => {\n        return applyValidators(options, Joi.boolean(), [\n          setDefault,\n          setRequired\n        ]);\n      })\n    };\n  },\n  get number() {\n    return {\n      value : 'number',\n      schema: memoize((options = Object.create(null)) => {\n        const schema = Joi.number().integer().positive();\n        return applyValidators(options, schema, [\n          setDefault,\n          setRequired,\n          setMinMax({ min: 0, max: MAX_INTEGER })\n        ]);\n      })\n    };\n  },\n  get smallint() {\n    return {\n      value : 'smallint',\n      schema: memoize((options = Object.create(null)) => {\n        const schema = Joi.number().integer();\n        return applyValidators(options, schema, [\n          setDefault,\n          setRequired,\n          setMinMax({ min: MIN_SMALLINT, max: MAX_SMALLINT })\n        ]);\n      })\n    };\n  },\n  get integer() {\n    return {\n      value : 'integer',\n      schema: memoize((options = Object.create(null)) => {\n        const schema = Joi.number().integer();\n        return applyValidators(options, schema, [\n          setDefault,\n          setRequired,\n          setMinMax({ min: MIN_INTEGER, max: MAX_INTEGER })\n        ]);\n      })\n    };\n  },\n  get float() {\n    return {\n      value : 'float',\n      schema: memoize((options = Object.create(null)) => {\n        const defaultLimitMin = 0;\n        const defaultLimitMax = 15;\n        const defaultLimit = 6;\n        let { limit = defaultLimit } = options;\n  \n        if (!isNumber(limit)) {\n          limit = defaultLimit;\n        } else {\n          if (limit < defaultLimitMin) { limit = defaultLimitMin }\n          if (limit > defaultLimitMax) { limit = defaultLimitMax }\n        }\n  \n        const schema = Joi.number().precision(limit);\n  \n        return applyValidators(options, schema, [\n          setDefault,\n          setRequired,\n          setMinMax({ min: MIN_INTEGER, max: MAX_INTEGER })\n        ]);\n      })\n    };\n  },\n  get money() {\n    return {\n      value : 'money',\n      schema: memoize((options = Object.create(null)) => {\n        const schema = Joi.number().precision(2).min(MIN_MONEY).max(MAX_MONEY);\n        return applyValidators(options, schema, [\n          setDefault,\n          setRequired\n        ]);\n      })\n    };\n  },\n  get string() {\n    return {\n      value : 'string',\n      schema: memoize((options = Object.create(null)) => {\n        let schema = Joi.string();\n        \n        const { truncate, length, max } = options;\n  \n        if ('length' in options && isNumber(length) && length >= 0) {\n          schema = schema.length(+length, 'utf8');\n        } else {\n          schema = setMinMax()(options, schema);\n    \n          if ('max' in options && isNumber(max)) {\n            if ('truncate' in options && truncate === true) {\n              schema = schema.truncate();\n            }\n          }\n        }\n  \n        if ('enum' in options && Array.isArray(options.enum)) {\n          schema = schema.valid(options.enum).insensitive();\n        }\n  \n        schema = [ 'trim', 'lowercase', 'uppercase' ].reduce((schema, name) => {\n          if (name in options && options[ name ] === true) {\n            schema = schema[ name ]();\n          }\n          return schema;\n        }, schema);\n  \n        return applyValidators(options, schema, [\n          setDefault,\n          setRequired\n        ]);\n      })\n    };\n  },\n  get text() {\n    return {\n      value : 'text',\n      schema: memoize((options = Object.create(null)) => {\n        let schema = Joi.string();\n\n        return applyValidators(options, schema, [\n          setMinMax(),\n          setDefault,\n          setRequired\n        ]);\n      })\n    };\n  },\n  get datetime() {\n    return {\n      value : 'datetime',\n      schema: memoize((options = Object.create(null)) => {\n        let schema = Joi.date().iso();\n        \n        return applyValidators(options, schema, [\n          setDefault,\n          setRequired\n        ]);\n      })\n    };\n  }\n};"]}