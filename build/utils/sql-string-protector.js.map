{"version":3,"sources":["../../src/utils/sql-string-protector.js"],"names":["SQL_ATTACKS","ESCAPED_COMMENT","ESCAPED_OR","ESCAPED_AND","EQUALS_WITH_COMMENT","ESCAPED_SEMICOLON","ESCAPED_UNION","SQL_ATTACKS_NAME","Object","keys","value","scan","i","length","attackName","regex","test"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;;;;;;AAaA,MAAMA,cAAc;;AAElBC,mBAAiB,yBAFC;;AAIlBC,cAAY,2DAJM,EAIwD;;AAE1EC,eAAa,4EANK,EAM0E;;AAE5FC,uBAAqB,sDARH,EAQiE;;AAEnFC,qBAAmB,qCAVD,EAUiE;;AAEnFC,iBAAe;AAZG,CAApB;AAcA,MAAMC,mBAAmBC,OAAOC,IAAP,CAAYT,WAAZ,CAAzB;;kBAEgBU,KAAD,IAAWC,KAAKD,KAAL,C;;AAE1B,SAASC,IAAT,CAAcD,KAAd,EAAqB;AACnB,MAAI,sBAASA,KAAT,CAAJ,EAAqB;;AAEnB,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIL,iBAAiBM,MAArC,EAA6CD,GAA7C,EAAkD;;AAEhD,UAAIE,aAAaP,iBAAkBK,CAAlB,CAAjB;;AAEA,UAAIG,QAAQf,YAAac,UAAb,CAAZ;;AAEA,UAAIC,MAAMC,IAAN,CAAWN,KAAX,CAAJ,EAAuB;;AAErB,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD","file":"sql-string-protector.js","sourcesContent":["import isString from 'lodash.isstring';\n\n/***\n * @author Richard Hyatt\n * @email: richard@vandium.io\n * @link: http://www.vandium.io\n * @link https://github.com/vandium-io/vandium-node/blob/master/lib/plugins/protect/sql.js\n *\n * Inspired by:\n *\n * http://www.symantec.com/connect/articles/detection-sql-injection-and-cross-site-scripting-attacks\n * http://www.troyhunt.com/2013/07/everything-you-wanted-to-know-about-sql.html\n * http://scottksmith.com/blog/2015/06/08/secure-node-apps-against-owasp-top-10-injection\n * http://www.unixwiz.net/techtips/sql-injection.html\n */\nconst SQL_ATTACKS = {\n\n  ESCAPED_COMMENT: /((\\%27)|(\\'))\\s*(\\-\\-)/i,\n\n  ESCAPED_OR: /\\w*\\s*((\\%27)|(\\'))\\s*((\\%6F)|o|(\\%4F))((\\%72)|r|(\\%52))/i,  // \"value' or \"\n\n  ESCAPED_AND: /\\w*\\s*((\\%27)|(\\'))\\s*((\\%41)|a|(\\%61))((\\%4E)|n|(\\%65))((\\%44)|d|(\\%64))/i,  // \"value' and \"\n\n  EQUALS_WITH_COMMENT: /\\s*((\\%3D)|(=))[^\\n]*((\\%27)|(\\')(\\-\\-)|(\\%3B)|(;))/i,       // \"= value 'sql_command\" or \"= value';sql_command\"\n\n  ESCAPED_SEMICOLON: /\\w*\\s*((\\%27)|(\\'))\\s*((\\%3B)|(;))/i,                          // \"value';\n\n  ESCAPED_UNION: /\\w*\\s*((\\%27)|(\\'))\\s*union/i\n};\nconst SQL_ATTACKS_NAME = Object.keys(SQL_ATTACKS);\n\nexport default (value) => scan(value);\n\nfunction scan(value) {\n  if (isString(value)) {\n\n    for (var i = 0; i < SQL_ATTACKS_NAME.length; i++) {\n\n      var attackName = SQL_ATTACKS_NAME[ i ];\n\n      var regex = SQL_ATTACKS[ attackName ];\n\n      if (regex.test(value)) {\n\n        return false;\n      }\n    }\n  }\n\n  return true;\n}"]}