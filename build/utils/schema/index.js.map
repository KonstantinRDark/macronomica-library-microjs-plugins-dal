{"version":3,"sources":["../../../src/utils/schema/index.js"],"names":["PropertyMustBeType","message","type","code","propertyName","propertyType","DetectedSqlInjectionError","propertyValue","ValidateError","Types","FIELDS_MASK","Schema","constructor","modelName","properties","tableName","fieldsMask","undefined","Array","isArray","some","name","schema","getTableName","replace","dbProperties","id","number","dbName","autoincrement","reduce","nameToDbName","__propertiesNames","__masks","getFieldsMask","__assignLinksMany","result","property","link","keys","push","getMyFields","fields","has","setParams","params","names","value","pick","convertIn","valid","validate","error","getMyCriteriaParams","props","null","migrateCreateTableSchema","options","primaryKey","autoIncrement","notNull","unique","assignLinksToOne","assignLinksToMany","indexOf","match","slice","toUpperCase","propertyMasks","fieldMask","list","split","hasNot","full","toLocaleLowerCase"],"mappings":"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","file":"index.js","sourcesContent":["import Joi from 'joi';\nimport WrappedError from 'error/wrapped';\nimport TypedError from 'error/typed';\nimport dot from 'dot-object';\nimport isString from 'lodash.isstring';\nimport isPlainObject from 'lodash.isplainobject';\nimport isBoolean from 'lodash.isboolean';\nimport uniq from 'lodash.uniq';\n\nimport SchemaTypes from './../schema-types';\nimport assignLinksToOne from './assign-links-to-one';\nimport assignLinksToMany from './assign-links-to-many';\nimport sqlStringProtector from './../sql-string-protector';\n\nconst PropertyMustBeType = TypedError({\n  message     : '{name} - свойство \"{propertyName}\" должно быть \"{propertyType}\"',\n  type        : 'micro.plugins.dal.schema.property.must.be.type',\n  code        : 400,\n  propertyName: null,\n  propertyType: null\n});\n\nconst DetectedSqlInjectionError = TypedError({\n  message      : '{name} - обнаружена потенциальная SQL инъекция в свойстве \"{propertyName}\"',\n  type         : 'micro.plugins.dal.schema.detected.sql.injection',\n  code         : 500,\n  propertyName : null,\n  propertyValue: null\n});\n\nconst ValidateError = WrappedError({\n  message      : '{name} - ошибка валидации свойства {propertyName} - {origMessage}',\n  type         : 'micro.plugins.dal.schema.validate.error',\n  code         : 400,\n  propertyName : null,\n  propertyValue: null\n});\n\nexport const Types = SchemaTypes;\nexport const FIELDS_MASK = [ 'full' ];\n\nexport default class Schema {\n  tableName = undefined;\n  \n  constructor(modelName, properties = { }, { tableName, fieldsMask } = { }) {\n    if (!isString(modelName)) {\n      throw PropertyMustBeType({ propertyName: 'modelName', propertyType: 'string' });\n    }\n    \n    if (fieldsMask !== undefined\n      && (!Array.isArray(fieldsMask) || fieldsMask.some(name => !isString(name)))\n    ) {\n      throw PropertyMustBeType({ propertyName: 'fieldsMask', propertyType: 'array<string>' });\n    }\n    \n    if (!isString(tableName)) {\n      throw PropertyMustBeType({ propertyName: 'tableName', propertyType: 'string' });\n    }\n  \n    let schema = this;\n    schema.fieldsMask = uniq([ ...FIELDS_MASK, ...(fieldsMask || []) ]);\n    schema.tableName = (tableName || getTableName(modelName)).replace(/-/g, '_');\n    schema.dbProperties = {};\n    \n    schema.properties = {\n      id: {\n        type         : SchemaTypes.number,\n        name         : 'id',\n        dbName       : 'id',\n        autoincrement: true\n      },\n      ...(Object\n        .keys(properties)\n        .reduce((properties, name) => {\n          let dbName = nameToDbName(name);\n          this.dbProperties[ dbName ] = Object.assign(properties[ name ], { name, dbName });\n          return properties;\n        }, properties))\n    };\n    schema.dbProperties.id = schema.properties.id;\n    schema.__propertiesNames = Object.keys(schema.properties);\n    schema.__masks = getFieldsMask(schema.__propertiesNames, schema.properties, schema.fieldsMask);\n    \n    schema.__assignLinksMany = schema.__propertiesNames.reduce((result, propertyName) => {\n      let property = schema.properties[ propertyName ];\n      let name = 'list';\n  \n      if ('link' in property && name in property.link) {\n        result.keys.push(propertyName);\n        result[ propertyName ] = property.link[ name ];\n      }\n  \n      return result;\n    }, { keys: [] });\n  }\n  \n  getMyFields = (fields) => {\n    // Если в свойстве fields строка - берем заранее заготовленный список пло маске\n    if (isString(fields)) {\n      if (!!this.__masks[ fields ]) {\n        return this.__masks[ fields ];\n      }\n      \n      fields = undefined;\n    }\n    \n    if (fields === undefined) {\n      fields = [ 'id' ];\n    }\n    \n    if (Array.isArray(fields)) {\n      return fields.reduce((fields, name) => {\n        if (this.has(name)) {\n          fields.push(this.properties[name].dbName);\n        }\n        return fields;\n      }, []);\n    }\n  };\n  \n  setParams = (params) => {\n    let schema = this;\n    let names = Object.keys(schema.properties);\n    let result = {};\n    \n    for(let propertyName of names) {\n      let property = schema.properties[ propertyName ];\n      let value = dot.pick(propertyName, params) || dot.pick(property.dbName, params);\n      \n      if (value === undefined) {\n        continue;\n      }\n      \n      if (!sqlStringProtector(value)) {\n        throw DetectedSqlInjectionError({ propertyName, propertyValue: value });\n      }\n      \n      if ('convertIn' in property.type) {\n        value = property.type.convertIn(value, property);\n      }\n      \n      let valid = schema.validate(propertyName, value);\n      \n      if (valid.error) {\n        throw valid.error;\n      }\n      \n      result[ property.dbName ] = valid.value;\n    }\n    \n    return result;\n  };\n  \n  getMyCriteriaParams = (params = {}) => {\n    let schema = this;\n    let result = Object.keys(schema.properties).reduce(reduce, {});\n    return result;\n    \n    function reduce(result, propertyName) {\n      let property = schema.properties[ propertyName ];\n      let value = dot.pick(propertyName, params) || dot.pick(property.dbName, params);\n      \n      if (value !== undefined) {\n        result[ property.dbName ] = value;\n      }\n      \n      return result;\n    }\n  };\n  \n  has = (property) => {\n    return isString(property) && !!this.properties[ property ];\n  };\n  \n  validate = (propertyName, value) => {\n    const props = this.properties[ propertyName ];\n    if (!props) { return false }\n    \n    if ('null' in props && props.null === true && (value === null || value === '')) {\n      return {\n        value,\n        error: undefined\n      };\n    }\n    \n    const valid = Joi.validate(value, props.type.schema(props));\n    \n    if (valid.error) {\n      valid.error = ValidateError(valid.error, { propertyName, propertyValue: value });\n    }\n    \n    return valid;\n  };\n  \n  migrateCreateTableSchema = () => {\n    const fields = Object.keys(this.properties);\n    const result = {};\n    \n    for(let name of fields) {\n      let options = this.properties[ name ];\n      \n      if (name === 'id') {\n        result[ name ] = { type: 'int', primaryKey: true, autoIncrement: true, notNull: true };\n        continue;\n      }\n      \n      let type;\n      \n      switch (options.type.value) {\n        case 'date' : { type = 'date'; break }\n        case 'text' : { type = 'text'; break }\n        case 'float' : { type = 'decimal'; break }\n        case 'money' : { type = 'decimal'; break }\n        case 'number' :\n        case 'integer': { type = 'int'; break }\n        case 'string' : { type = 'string'; break }\n        case 'boolean': { type = 'boolean'; break }\n        case 'smallint': { type = 'smallint'; break }\n        case 'datetime': { type = 'datetime'; break }\n        case 'array': { type = 'string'; break }\n      }\n      \n      if (!type) { continue }\n      \n      let params = { type };\n      \n      params.notNull = !(options.null === true);\n      \n      if ('unique' in options) {\n        params.unique = options.unique === true;\n      }\n      \n      result[ options.dbName ] = params;\n    }\n    \n    return result;\n  };\n  \n  assignLinksToOne = assignLinksToOne(this);\n  \n  assignLinksToMany = assignLinksToMany(this);\n}\n\nfunction nameToDbName(name) {\n  if (!~name.indexOf('.')) {\n    return name;\n  }\n  \n  return name.replace(/\\.\\w{1}/gi, match => match.slice(1).toUpperCase());\n}\n\nfunction getFieldsMask(names, properties, fieldsMask) {\n  return names.reduce((result, propertyName) => {\n    const property = properties[ propertyName ];\n    \n    let propertyMasks = property.fieldsMask;\n    \n    if (propertyMasks === undefined) {\n      propertyMasks = true;\n    }\n    \n    if (isBoolean(propertyMasks)) {\n      propertyMasks = fieldsMask.reduce((result, fieldMask) => {\n        result[ fieldMask ] = propertyMasks;\n        return result;\n      }, {});\n    }\n    \n    // Если указали в формате строки - разобьем ее по сепаратору и преобразуем к объекту\n    // Если указали в формате массива - преобразуем к объекту\n    if (isString(propertyMasks) || Array.isArray(propertyMasks)) {\n      let list = isString(propertyMasks) ? propertyMasks.split(':') : propertyMasks;\n      propertyMasks = list.reduce((result, name) => {\n        let hasNot = !!~name.indexOf('!');\n        \n        if (!~name.indexOf('!')) {\n          result[ name ] = true;\n        }\n        \n        return result;\n      }, {});\n    }\n    \n    if (!isPlainObject(propertyMasks)) {\n      throw PropertyMustBeType({\n        propertyName: `${ propertyName }.fieldsMask`,\n        propertyType: 'string | array<string> | object'\n      });\n    }\n    \n    return fieldsMask.reduce((result, fieldMask) => {\n      result[ fieldMask ] = result[ fieldMask ] || [];\n      \n      // Если в описании свойства указали fieldsMask\n      // И указанное значение равно true - добавим его во все маски\n      if (\n        fieldMask === 'full' && (!(fieldMask in propertyMasks) || propertyMasks[ fieldMask ] !== false)\n        || fieldMask in propertyMasks && propertyMasks[ fieldMask ] === true\n      ) {\n        result[ fieldMask ].push(property.dbName);\n      }\n      \n      return result;\n    }, result);\n  }, { full: [] });\n}\n\n/**\n * @param {string} name\n * @returns {string}\n */\nfunction getTableName(name) {\n  return name.toLocaleLowerCase();\n}"]}