{"version":3,"sources":["../../../src/utils/schema/assign-links-to-one.js"],"names":["schema","record","exec","properties","propertiesNames","__propertiesNames","promises","propertyName","property","hasMany","type","array","name","link","push","__assignLink","length","resolve","all","then","pin","lastIndexOf","slice","criteria","value","pick","undefined","Array","isArray","id","in"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;kBAEgBA,MAAD,IAAY,CAACC,MAAD,EAASC,IAAT,KAAkB;AAC3C,QAAMC,aAAaH,OAAOG,UAA1B;AACA,QAAMC,kBAAkBJ,OAAOK,iBAA/B;AACA,QAAMC,WAAW,EAAjB;;AAEA,OAAK,IAAIC,YAAT,IAAyBH,eAAzB,EAA0C;AACxC,QAAII,WAAWL,WAAYI,YAAZ,CAAf;AACA,QAAIE,UAAUD,SAASE,IAAT,KAAkB,sBAAYC,KAA5C;AACA,QAAIC,OAAOH,UAAU,MAAV,GAAmB,KAA9B;;AAEA,QAAI,CAAC,CAACD,SAASK,IAAX,IAAmBD,QAAQJ,SAASK,IAAxC,EAA8C;AAC5CP,eAASQ,IAAT,CAAcC,aAAaR,YAAb,EAA2BE,OAA3B,EAAoCD,SAASK,IAAT,CAAeD,IAAf,CAApC,CAAd;AACD;AACF;;AAED,MAAI,CAACN,SAASU,MAAd,EAAsB;AACpB,WAAO,kBAAQC,OAAR,CAAgBhB,MAAhB,CAAP;AACD;;AAED;AACA,SAAO,kBAAQiB,GAAR,CAAYZ,QAAZ,EAAsBa,IAAtB,CAA2B,MAAMlB,MAAjC,CAAP;;AAEA,WAASc,YAAT,CAAsBR,YAAtB,EAAoCE,OAApC,EAA6CW,GAA7C,EAAkD;AAChD,UAAMR,OAAO,CAAC,CAAC,CAACL,aAAac,WAAb,CAAyB,GAAzB,CAAH,GACTd,aAAae,KAAb,CAAmB,CAAnB,EAAsBf,aAAac,WAAb,CAAyB,GAAzB,CAAtB,CADS,GAETd,YAFJ;AAGA,UAAMgB,WAAW,EAAjB;AACA,UAAMC,QAAQ,oBAAIC,IAAJ,CAASlB,YAAT,EAAuBN,MAAvB,CAAd;;AAEA,QAAIuB,UAAUE,SAAV,IAAuBF,UAAU,IAAjC,IAA0Cf,WAAWkB,MAAMC,OAAN,CAAcJ,KAAd,CAAX,IAAmC,CAACA,MAAMR,MAAxF,EAAiG;AAC/F,aAAO,kBAAQC,OAAR,CAAgBhB,MAAhB,CAAP;AACD;;AAED,QAAIQ,OAAJ,EAAa;AACXc,eAASM,EAAT,GAAc,EAAEC,IAAIN,KAAN,EAAd;AACD,KAFD,MAEO;AACLD,eAASM,EAAT,GAAcL,KAAd;AACD;;AAED,WAAOtB,gCAAUkB,GAAV,IAAeG,QAAf,KACJJ,IADI,CACCN,QAAQ;AACZ,UAAIJ,OAAJ,EAAa;AACXR,eAAQW,IAAR,IAAiBC,IAAjB;AACD,OAFD,MAEO;AACL,8BAAc,oBAAIY,IAAJ,CAASb,IAAT,EAAeX,MAAf,CAAd,EAAsCY,IAAtC;AACD;;AAED,aAAOZ,MAAP;AACD,KATI,CAAP;AAUD;AACF,C","file":"assign-links-to-one.js","sourcesContent":["import dot from 'dot-object';\nimport SchemaTypes from './../schema-types';\n\nexport default (schema) => (record, exec) => {\n  const properties = schema.properties;\n  const propertiesNames = schema.__propertiesNames;\n  const promises = [];\n  \n  for (let propertyName of propertiesNames) {\n    let property = properties[ propertyName ];\n    let hasMany = property.type === SchemaTypes.array;\n    let name = hasMany ? 'list' : 'one';\n    \n    if (!!property.link && name in property.link) {\n      promises.push(__assignLink(propertyName, hasMany, property.link[ name ]));\n    }\n  }\n  \n  if (!promises.length) {\n    return Promise.resolve(record);\n  }\n  \n  // Получаем все связанные объекты и сетим их себе\n  return Promise.all(promises).then(() => record);\n  \n  function __assignLink(propertyName, hasMany, pin) {\n    const name = !!~propertyName.lastIndexOf('.')\n      ? propertyName.slice(0, propertyName.lastIndexOf('.'))\n      : propertyName;\n    const criteria = {};\n    const value = dot.pick(propertyName, record);\n    \n    if (value === undefined || value === null || (hasMany && Array.isArray(value) && !value.length)) {\n      return Promise.resolve(record);\n    }\n    \n    if (hasMany) {\n      criteria.id = { in: value };\n    } else {\n      criteria.id = value;\n    }\n    \n    return exec({ ...pin, criteria })\n      .then(link => {\n        if (hasMany) {\n          record[ name ] = link;\n        } else {\n          Object.assign(dot.pick(name, record), link);\n        }\n        \n        return record;\n      });\n  }\n};"]}