{"version":3,"sources":["../../../src/utils/schema/assign-links-to-many.js"],"names":["schema","records","exec","properties","links","__assignLinksMany","keys","length","Promise","resolve","criteria","reduce","result","record","propertyName","property","hasMany","type","array","value","pick","undefined","Array","isArray","data","list","map","WeakMap","Map","has","push","set","get","all","Object","name","lastIndexOf","slice","pin","loadOne","id","in","then","recordsLinks","link","innerList","forEach","i","assign"],"mappings":"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","file":"assign-links-to-many.js","sourcesContent":["import dot from 'dot-object';\nimport SchemaTypes from './../schema-types';\n\nexport default (schema) => (records, exec) => {\n  const properties = schema.properties;\n  const links = schema.__assignLinksMany;\n  \n  if (!links.keys.length) {\n    return Promise.resolve(records);\n  }\n  \n  const criteria = records.reduce((result, record) => {\n    \n    for(let propertyName of links.keys) {\n      let property = properties[ propertyName ];\n      let hasMany = property.type === SchemaTypes.array;\n      let value = dot.pick(propertyName, record);\n      \n      if (value === undefined || value === null || (hasMany && Array.isArray(value) && !value.length)) {\n        continue;\n      }\n      \n      let data = result[ propertyName ] = result[ propertyName ] || {\n          list: [],\n          map : hasMany ? new WeakMap() : new Map(),\n        };\n      \n      if (!data.map.has(value)) {\n        data.list.push(value);\n        data.map.set(value, []);\n      }\n      \n      data.map.get(value).push(record);\n    }\n    \n    return result;\n  }, {});\n  \n  // Получаем все связанные объекты и сетим их себе\n  return Promise\n    .all(Object.keys(criteria).map(propertyName => {\n      let name = !!~propertyName.lastIndexOf('.')\n        ? propertyName.slice(0, propertyName.lastIndexOf('.'))\n        : propertyName;\n      let hasMany = properties[ propertyName ].type === SchemaTypes.array;\n      let list = criteria[ propertyName ].list;\n      let map = criteria[ propertyName ].map;\n      \n      if (!list.length) {\n        return Promise.resolve();\n      }\n      \n      const pin = links[ propertyName ];\n      \n      return hasMany ? Promise.all(list.map(loadOne)) : loadOne(list);\n      \n      function loadOne(list) {\n        return exec({ ...pin, criteria: { id: { in: list } } })\n          .then(recordsLinks => recordsLinks.map(link => map.get(hasMany ? list : link.id).map(record => {\n            if (hasMany) {\n              let innerList = dot.pick(name, record);\n              innerList.forEach((id, i) => {\n                if (link.id === id) {\n                  innerList[ i ] = link;\n                }\n              });\n            }\n            else {\n              Object.assign(dot.pick(name, record), link);\n            }\n      \n            return record;\n          })));\n      }\n    }))\n    .then(() => records);\n};"]}