{"version":3,"sources":["../../../src/utils/schema/assign-links-to-many.js"],"names":["schema","records","exec","properties","links","__assignLinksMany","keys","length","Promise","resolve","criteria","reduce","result","record","propertyName","property","hasMany","type","array","value","pick","undefined","data","list","map","WeakMap","Map","has","push","set","get","all","Object","name","lastIndexOf","slice","pin","loadOne","id","in","then","recordsLinks","link","assign"],"mappings":"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","file":"assign-links-to-many.js","sourcesContent":["import dot from 'dot-object';\nimport SchemaTypes from './../schema-types';\n\nexport default (schema) => (records, exec) => {\n  const properties = schema.properties;\n  const links = schema.__assignLinksMany;\n  \n  if (!links.keys.length) {\n    return Promise.resolve(records);\n  }\n  \n  const criteria = records.reduce((result, record) => {\n    \n    for(let propertyName of links.keys) {\n      let property = properties[ propertyName ];\n      let hasMany = property.type === SchemaTypes.array;\n      let value = dot.pick(propertyName, record);\n      \n      if (hasMany && !value.length || value === undefined) {\n        continue;\n      }\n      \n      let data = result[ propertyName ] = result[ propertyName ] || {\n          list: [],\n          map : hasMany ? new WeakMap() : new Map(),\n        };\n      \n      if (!data.map.has(value)) {\n        data.list.push(value);\n        data.map.set(value, []);\n      }\n      \n      data.map.get(value).push(record);\n    }\n    \n    return result;\n  }, {});\n  \n  // Получаем все связанные объекты и сетим их себе\n  return Promise\n    .all(Object.keys(criteria).map(propertyName => {\n      let name = !!~propertyName.lastIndexOf('.')\n        ? propertyName.slice(0, propertyName.lastIndexOf('.'))\n        : propertyName;\n      let hasMany = properties[ propertyName ].type === SchemaTypes.array;\n      let list = criteria[ propertyName ].list;\n      let map = criteria[ propertyName ].map;\n      \n      if (!list.length) {\n        return Promise.resolve();\n      }\n      \n      const pin = links[ propertyName ];\n      \n      return hasMany ? Promise.all(list.map(loadOne)) : loadOne(list);\n      \n      function loadOne(list) {\n        return exec({ ...pin, criteria: { id: { in: list } } })\n          .then(recordsLinks => recordsLinks.map(link => map.get(hasMany ? list : link.id).map(record => {\n            if (hasMany) {\n              record[ name ] = record[ name ].map(id => link.id === id ? link : id);\n            }\n            else {\n              Object.assign(record[ name ], link);\n            }\n      \n            return record;\n          })));\n      }\n    }))\n    .then(() => records);\n};"]}