{"version":3,"sources":["../../src/utils/schema.js"],"names":["Types","Schema","modelName","properties","tableName","undefined","getMyFields","fields","reduce","name","has","push","getMyParams","params","Object","keys","result","property","validate","value","props","Boolean","null","error","valid","type","schema","code","message","migrateCreateTableSchema","options","primaryKey","autoIncrement","notNull","unique","getTableName","id","number","autoincrement","toLocaleLowerCase"],"mappings":"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","file":"schema.js","sourcesContent":["import Joi from 'joi';\nimport SchemaTypes from './schema-types';\n\nexport const Types = SchemaTypes;\n\nexport default class Schema {\n  tableName = undefined;\n    \n  constructor(modelName, properties = { }, { tableName } = { }) {\n    this.tableName = tableName || getTableName(modelName);\n    this.properties = {\n      id: {\n        type         : SchemaTypes.number,\n        autoincrement: true\n      },\n      ...properties\n    };\n  }\n  \n  getMyFields = (fields = [ 'id' ]) => fields.reduce((fields, name) => {\n    if (this.has(name)) {\n      fields.push(name);\n    }\n    return fields;\n  }, []);\n  \n  getMyParams = (params = {}) => Object.keys(params).reduce((result, name) => {\n    if (this.has(name)) {\n      result[ name ] = params[ name ];\n    }\n    return params;\n  }, {});\n  \n  has = (property) => {\n    return !!this.properties[ property ];\n  };\n\n  validate = (property, value) => {\n    const props = this.properties[ property ];\n    if (!props) { return false }\n    \n    if ('null' in props && Boolean(props.null) === true && value === null) {\n      return {\n        value,\n        error: undefined\n      };\n    }\n    \n    const valid = Joi.validate(value, props.type.schema(props));\n  \n    if (valid.error) {\n      return {\n        value: valid.value,\n        error: {\n          code   : 'error.dal.params',\n          message: `${ property }: ${ valid.error.message }`\n        }\n      };\n    }\n  \n    return valid;\n  };\n  \n  migrateCreateTableSchema = () => {\n    const fields = Object.keys(this.properties);\n    const result = {};\n\n    for(let name of fields) {\n      let options = this.properties[ name ];\n\n      if (name === 'id') {\n        result[ name ] = { type: 'int', primaryKey: true, autoIncrement: true, notNull: true };\n        continue;\n      }\n\n      let type;\n      \n      switch (options.type.value) {\n        case 'date' : { type = 'date'; break }\n        case 'text' : { type = 'text'; break }\n        case 'float' : { type = 'decimal'; break }\n        case 'money' : { type = 'decimal'; break }\n        case 'number' :\n        case 'integer': { type = 'int'; break }\n        case 'string' : { type = 'string'; break }\n        case 'boolean': { type = 'boolean'; break }\n        case 'smallint': { type = 'smallint'; break }\n        case 'datetime': { type = 'datetime'; break }\n        case 'array': { type = 'string'; break }\n      }\n      \n      if (!type) { continue }\n      \n      let params = { type };\n\n      params.notNull = !(options.null === true);\n\n      if ('unique' in options) {\n        params.unique = options.unique === true;\n      }\n\n      result[ name ] = params;\n    }\n    \n    return result;\n  }\n}\n\n/**\n * @param {string} name\n * @returns {string}\n */\nfunction getTableName(name) {\n  return name.toLocaleLowerCase();\n}"]}