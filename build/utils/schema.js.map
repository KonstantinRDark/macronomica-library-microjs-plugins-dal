{"version":3,"sources":["../../src/utils/schema.js"],"names":["PropertyMustBeType","message","type","code","propertyName","propertyType","Types","FIELDS_MASK","Schema","constructor","modelName","properties","tableName","fieldsMask","undefined","getMyFields","fields","__masks","Array","isArray","reduce","name","has","push","getMyParams","params","Object","keys","result","property","validate","value","props","convertIn","Boolean","null","error","valid","schema","migrateCreateTableSchema","options","primaryKey","autoIncrement","notNull","unique","some","getTableName","replace","id","number","autoincrement","__propertiyNames","getFieldsMask","names","propertyMasks","fieldMask","list","split","hasNot","indexOf","full","toLocaleLowerCase"],"mappings":"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","file":"schema.js","sourcesContent":["import Joi from 'joi';\nimport TypedError from 'error/typed';\nimport isString from 'lodash.isstring';\nimport isPlainObject from 'lodash.isplainobject';\nimport isBoolean from 'lodash.isboolean';\nimport uniq from 'lodash.uniq';\nimport SchemaTypes from './schema-types';\n\nconst PropertyMustBeType = TypedError({\n  message     : '{name} - свойство \"{propertyName}\" должно быть \"{propertyType}\"',\n  type        : 'micro.plugins.dal.property.must.be.type',\n  code        : 400,\n  propertyName: null,\n  propertyType: null\n});\n\nexport const Types = SchemaTypes;\nexport const FIELDS_MASK = [ 'full' ];\n\nexport default class Schema {\n  tableName = undefined;\n\n  constructor(modelName, properties = { }, { tableName, fieldsMask } = { }) {\n    if (!isString(modelName)) {\n      throw PropertyMustBeType({ propertyName: 'modelName', propertyType: 'string' });\n    }\n\n    if (fieldsMask !== undefined\n      && (!Array.isArray(fieldsMask) || fieldsMask.some(name => !isString(name)))\n    ) {\n      throw PropertyMustBeType({ propertyName: 'fieldsMask', propertyType: 'array<string>' });\n    }\n\n    if (!isString(tableName)) {\n      throw PropertyMustBeType({ propertyName: 'tableName', propertyType: 'string' });\n    }\n\n    this.fieldsMask = uniq([ ...FIELDS_MASK, ...(fieldsMask || []) ]);\n    this.tableName = (tableName || getTableName(modelName)).replace('-', '_');\n\n    this.properties = {\n      id: {\n        type         : SchemaTypes.number,\n        autoincrement: true\n      },\n      ...properties\n    };\n\n    this.__propertiyNames = Object.keys(this.properties);\n    this.__masks = getFieldsMask(this.__propertiyNames, this.properties, this.fieldsMask);\n  }\n\n  getMyFields = (fields) => {\n    // Если в свойстве fields строка - берем заранее заготовленный список пло маске\n    if (isString(fields)) {\n      if (!!this.__masks[ fields ]) {\n        return this.__masks[ fields ];\n      }\n\n      fields = undefined;\n    }\n\n    if (fields === undefined) {\n      fields = [ 'id' ];\n    }\n\n    if (Array.isArray(fields)) {\n      return fields.reduce((fields, name) => {\n        if (this.has(name)) {\n          fields.push(name);\n        }\n        return fields;\n      }, []);\n    }\n  };\n\n  getMyParams = (params = {}) => Object.keys(params).reduce((result, name) => {\n    if (this.has(name)) {\n      result[ name ] = params[ name ];\n    }\n    return params;\n  }, {});\n\n  has = (property) => {\n    return isString(property) && !!this.properties[ property ];\n  };\n\n  validate = (property, value) => {\n    const props = this.properties[ property ];\n    if (!props) { return false }\n\n    if ('convertIn' in props.type) {\n      value = props.type.convertIn(value, props);\n    }\n\n    if ('null' in props && Boolean(props.null) === true && value === null) {\n      return {\n        value,\n        error: undefined\n      };\n    }\n\n    const valid = Joi.validate(value, props.type.schema(props));\n\n    if (valid.error) {\n      return {\n        value: valid.value,\n        error: {\n          code   : 'error.dal.params',\n          message: `${ property }: ${ valid.error.message }`\n        }\n      };\n    }\n\n    return valid;\n  };\n\n  migrateCreateTableSchema = () => {\n    const fields = Object.keys(this.properties);\n    const result = {};\n\n    for(let name of fields) {\n      let options = this.properties[ name ];\n\n      if (name === 'id') {\n        result[ name ] = { type: 'int', primaryKey: true, autoIncrement: true, notNull: true };\n        continue;\n      }\n\n      let type;\n\n      switch (options.type.value) {\n        case 'date' : { type = 'date'; break }\n        case 'text' : { type = 'text'; break }\n        case 'float' : { type = 'decimal'; break }\n        case 'money' : { type = 'decimal'; break }\n        case 'number' :\n        case 'integer': { type = 'int'; break }\n        case 'string' : { type = 'string'; break }\n        case 'boolean': { type = 'boolean'; break }\n        case 'smallint': { type = 'smallint'; break }\n        case 'datetime': { type = 'datetime'; break }\n        case 'array': { type = 'string'; break }\n      }\n\n      if (!type) { continue }\n\n      let params = { type };\n\n      params.notNull = !(options.null === true);\n\n      if ('unique' in options) {\n        params.unique = options.unique === true;\n      }\n\n      result[ name ] = params;\n    }\n\n    return result;\n  }\n}\n\nfunction getFieldsMask(names, properties, fieldsMask) {\n  return names.reduce((result, propertyName) => {\n    const property = properties[ propertyName ];\n\n    let propertyMasks = property.fieldsMask;\n\n    if (propertyMasks === undefined) {\n      propertyMasks = true;\n    }\n\n    if (isBoolean(propertyMasks)) {\n      propertyMasks = fieldsMask.reduce((result, fieldMask) => {\n        result[ fieldMask ] = propertyMasks;\n        return result;\n      }, {});\n    }\n\n    // Если указали в формате строки - разобьем ее по сепаратору и преобразуем к объекту\n    // Если указали в формате массива - преобразуем к объекту\n    if (isString(propertyMasks) || Array.isArray(propertyMasks)) {\n      let list = isString(propertyMasks) ? propertyMasks.split(':') : propertyMasks;\n      propertyMasks = list.reduce((result, name) => {\n        let hasNot = !!~name.indexOf('!');\n        result[ hasNot ? name.replace('!', '') : name ] = !hasNot;\n        return result;\n      }, {});\n    }\n\n    if (!isPlainObject(propertyMasks)) {\n      throw PropertyMustBeType({\n        propertyName: `${ propertyName }.fieldsMask`,\n        propertyType: 'string | array<string> | object'\n      });\n    }\n\n    return fieldsMask.reduce((result, fieldMask) => {\n      result[ fieldMask ] = result[ fieldMask ] || [];\n\n      // Если в описании свойства не указали fieldsMask\n      // Или если указанное значение не равно false - добавим его во все маски\n      if (!(fieldMask in propertyMasks) || propertyMasks[ fieldMask ] !== false) {\n        result[ fieldMask ].push(propertyName);\n      }\n\n      return result;\n    }, result);\n  }, { full: [] });\n}\n\n/**\n * @param {string} name\n * @returns {string}\n */\nfunction getTableName(name) {\n  return name.toLocaleLowerCase();\n}"]}