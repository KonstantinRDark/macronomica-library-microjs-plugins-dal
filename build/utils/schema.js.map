{"version":3,"sources":["../../src/utils/schema.js"],"names":["PropertyMustBeType","message","type","code","propertyName","propertyType","DetectedSqlInjectionError","propertyValue","ValidateError","Types","FIELDS_MASK","Schema","constructor","modelName","properties","tableName","fieldsMask","undefined","getMyFields","fields","__masks","Array","isArray","reduce","name","has","push","setParams","params","schema","names","Object","keys","result","property","value","pick","dbName","valid","validate","error","getMyCriteriaParams","props","Boolean","null","migrateCreateTableSchema","options","primaryKey","autoIncrement","notNull","unique","some","getTableName","replace","dbProperties","id","number","autoincrement","nameToDbName","assign","__propertiyNames","getFieldsMask","indexOf","match","slice","toUpperCase","propertyMasks","fieldMask","list","split","hasNot","full","toLocaleLowerCase"],"mappings":"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","file":"schema.js","sourcesContent":["import os from 'os';\nimport Joi from 'joi';\nimport WrappedError from 'error/wrapped';\nimport TypedError from 'error/typed';\nimport dot from 'dot-object';\nimport isString from 'lodash.isstring';\nimport isPlainObject from 'lodash.isplainobject';\nimport isBoolean from 'lodash.isboolean';\nimport uniq from 'lodash.uniq';\nimport SchemaTypes from './schema-types';\nimport sqlStringProtector from './sql-string-protector';\n\nconst PropertyMustBeType = TypedError({\n  message     : '{name} - свойство \"{propertyName}\" должно быть \"{propertyType}\"',\n  type        : 'micro.plugins.dal.schema.property.must.be.type',\n  code        : 400,\n  propertyName: null,\n  propertyType: null\n});\n\nconst DetectedSqlInjectionError = TypedError({\n  message      : '{name} - обнаружена потенциальная SQL инъекция в свойстве \"{propertyName}\"',\n  type         : 'micro.plugins.dal.schema.detected.sql.injection',\n  code         : 500,\n  propertyName : null,\n  propertyValue: null\n});\n\nconst ValidateError = WrappedError({\n  message      : '{name} - ошибка валидации свойства {propertyName} - {origMessage}',\n  type         : 'micro.plugins.dal.schema.validate.error',\n  code         : 400,\n  propertyName : null,\n  propertyValue: null\n});\n\nexport const Types = SchemaTypes;\nexport const FIELDS_MASK = [ 'full' ];\n\nexport default class Schema {\n  tableName = undefined;\n\n  constructor(modelName, properties = { }, { tableName, fieldsMask } = { }) {\n    if (!isString(modelName)) {\n      throw PropertyMustBeType({ propertyName: 'modelName', propertyType: 'string' });\n    }\n\n    if (fieldsMask !== undefined\n      && (!Array.isArray(fieldsMask) || fieldsMask.some(name => !isString(name)))\n    ) {\n      throw PropertyMustBeType({ propertyName: 'fieldsMask', propertyType: 'array<string>' });\n    }\n\n    if (!isString(tableName)) {\n      throw PropertyMustBeType({ propertyName: 'tableName', propertyType: 'string' });\n    }\n\n    this.fieldsMask = uniq([ ...FIELDS_MASK, ...(fieldsMask || []) ]);\n    this.tableName = (tableName || getTableName(modelName)).replace(/-/g, '_');\n    this.dbProperties = {};\n\n    this.properties = {\n      id: {\n        type         : SchemaTypes.number,\n        name         : 'id',\n        dbName       : 'id',\n        autoincrement: true\n      },\n      ...(Object\n        .keys(properties)\n        .reduce((properties, name) => {\n          let dbName = nameToDbName(name);\n          this.dbProperties[ dbName ] = Object.assign(properties[ name ], { name, dbName });\n          return properties;\n        }, properties))\n    };\n    this.dbProperties.id = this.properties.id;\n    this.__propertiyNames = Object.keys(this.properties);\n    this.__masks = getFieldsMask(this.__propertiyNames, this.properties, this.fieldsMask);\n  }\n\n  getMyFields = (fields) => {\n    // Если в свойстве fields строка - берем заранее заготовленный список пло маске\n    if (isString(fields)) {\n      if (!!this.__masks[ fields ]) {\n        return this.__masks[ fields ];\n      }\n\n      fields = undefined;\n    }\n\n    if (fields === undefined) {\n      fields = [ 'id' ];\n    }\n\n    if (Array.isArray(fields)) {\n      return fields.reduce((fields, name) => {\n        if (this.has(name)) {\n          fields.push(name);\n        }\n        return fields;\n      }, []);\n    }\n  };\n\n  setParams = (params) => {\n    let schema = this;\n    let names = Object.keys(schema.properties);\n    let result = {};\n\n    for(let propertyName of names) {\n      let property = schema.properties[ propertyName ];\n      let value = dot.pick(propertyName, params) || dot.pick(property.dbName, params);\n\n      if (value === undefined) {\n        continue;\n      }\n\n      if (!sqlStringProtector(value)) {\n        throw DetectedSqlInjectionError({ propertyName, propertyValue: value });\n      }\n\n      let valid = schema.validate(propertyName, value);\n\n      if (valid.error) {\n        throw valid.error;\n      }\n\n      result[ property.dbName ] = valid.value;\n    }\n\n    return result;\n  };\n\n  getMyCriteriaParams = (params = {}) => {\n    let schema = this;\n    let result = Object.keys(schema.properties).reduce(reduce, {});\n    return result;\n\n    function reduce(result, propertyName) {\n      let property = schema.properties[ propertyName ];\n      let value = dot.pick(propertyName, params) || dot.pick(property.dbName, params);\n\n      if (value !== undefined) {\n        result[ property.dbName ] = value;\n      }\n\n      return result;\n    }\n  };\n\n  has = (property) => {\n    return isString(property) && !!this.properties[ property ];\n  };\n\n  validate = (propertyName, value) => {\n    const props = this.properties[ propertyName ];\n    if (!props) { return false }\n\n    if ('null' in props && Boolean(props.null) === true && value === null) {\n      return {\n        value,\n        error: undefined\n      };\n    }\n\n    const valid = Joi.validate(value, props.type.schema(props));\n\n    if (valid.error) {\n      valid.error = ValidateError(valid.error, { propertyName, propertyValue: value });\n    }\n\n    return valid;\n  };\n\n  migrateCreateTableSchema = () => {\n    const fields = Object.keys(this.properties);\n    const result = {};\n\n    for(let name of fields) {\n      let options = this.properties[ name ];\n\n      if (name === 'id') {\n        result[ name ] = { type: 'int', primaryKey: true, autoIncrement: true, notNull: true };\n        continue;\n      }\n\n      let type;\n\n      switch (options.type.value) {\n        case 'date' : { type = 'date'; break }\n        case 'text' : { type = 'text'; break }\n        case 'float' : { type = 'decimal'; break }\n        case 'money' : { type = 'decimal'; break }\n        case 'number' :\n        case 'integer': { type = 'int'; break }\n        case 'string' : { type = 'string'; break }\n        case 'boolean': { type = 'boolean'; break }\n        case 'smallint': { type = 'smallint'; break }\n        case 'datetime': { type = 'datetime'; break }\n        case 'array': { type = 'string'; break }\n      }\n\n      if (!type) { continue }\n\n      let params = { type };\n\n      params.notNull = !(options.null === true);\n\n      if ('unique' in options) {\n        params.unique = options.unique === true;\n      }\n\n      result[ options.dbName ] = params;\n    }\n\n    return result;\n  }\n}\n\nfunction nameToDbName(name) {\n  if (!~name.indexOf('.')) {\n    return name;\n  }\n\n  return name.replace(/\\.\\w{1}/gi, match => match.slice(1).toUpperCase());\n}\n\nfunction getFieldsMask(names, properties, fieldsMask) {\n  return names.reduce((result, propertyName) => {\n    const property = properties[ propertyName ];\n\n    let propertyMasks = property.fieldsMask;\n\n    if (propertyMasks === undefined) {\n      propertyMasks = true;\n    }\n\n    if (isBoolean(propertyMasks)) {\n      propertyMasks = fieldsMask.reduce((result, fieldMask) => {\n        result[ fieldMask ] = propertyMasks;\n        return result;\n      }, {});\n    }\n\n    // Если указали в формате строки - разобьем ее по сепаратору и преобразуем к объекту\n    // Если указали в формате массива - преобразуем к объекту\n    if (isString(propertyMasks) || Array.isArray(propertyMasks)) {\n      let list = isString(propertyMasks) ? propertyMasks.split(':') : propertyMasks;\n      propertyMasks = list.reduce((result, name) => {\n        let hasNot = !!~name.indexOf('!');\n        result[ hasNot ? name.replace('!', '') : name ] = !hasNot;\n        return result;\n      }, {});\n    }\n\n    if (!isPlainObject(propertyMasks)) {\n      throw PropertyMustBeType({\n        propertyName: `${ propertyName }.fieldsMask`,\n        propertyType: 'string | array<string> | object'\n      });\n    }\n\n    return fieldsMask.reduce((result, fieldMask) => {\n      result[ fieldMask ] = result[ fieldMask ] || [];\n\n      // Если в описании свойства не указали fieldsMask\n      // Или если указанное значение не равно false - добавим его во все маски\n      if (!(fieldMask in propertyMasks) || propertyMasks[ fieldMask ] !== false) {\n        result[ fieldMask ].push(property.dbName);\n      }\n\n      return result;\n    }, result);\n  }, { full: [] });\n}\n\n/**\n * @param {string} name\n * @returns {string}\n */\nfunction getTableName(name) {\n  return name.toLocaleLowerCase();\n}"]}