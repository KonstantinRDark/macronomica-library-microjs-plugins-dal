{"version":3,"sources":["../../../../src/modules/tree/actions/update-node.js"],"names":["buildUpdateTreeNode","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","criteria","params","options","id","parentId","Promise","reject","property","isFinite","act","fields","then","node","updated","all","catch"],"mappings":";;;;;;;;QAmBgBA,mB,GAAAA,mB;;AAnBhB;;;;AACA;;;;AACA;;;;AACA;;AACA;;AAIA;;;;AAOA,MAAMC,aAAa,EAAEC,8BAAF,EAAuBC,QAAQ,aAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,oBAAoBI,GAApB,EAAyBC,UAAzB,EAAqCE,GAArC,C;;AAE9C,SAASP,mBAAT,CAA6BI,GAA7B,EAAkCC,UAAlC,QAAoG;AAAA,MAApDG,MAAoD,QAApDA,MAAoD;AAAA,2BAA5CC,QAA4C;AAAA,MAA5CA,QAA4C,iCAAjC,EAAiC;AAAA,yBAA7BC,MAA6B;AAAA,MAA7BA,MAA6B,+BAApB,EAAoB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,QACjGC,EADiG,GAC1FH,QAD0F,CACjGG,EADiG;AAAA,QAEjGC,QAFiG,GAEpFH,MAFoF,CAEjGG,QAFiG;;;AAIzG,MAAI,CAACD,EAAL,EAAS;AACP,WAAOE,QAAQC,MAAR,CAAe,kDAA6Bd,UAA7B,IAAyCe,UAAU,aAAnD,IAAf,CAAP;AACD;;AAED,MAAI,CAACR,MAAL,EAAa;AACX,WAAOM,QAAQC,MAAR,CAAe,iCAAoBd,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAOM,QAAQC,MAAR,CAAe,+CAAkCd,UAAlC,CAAf,CAAP;AACD;;AAED;AACA,MAAI,CAACY,QAAD,IAAa,CAACI,SAAS,CAACJ,QAAV,CAAlB,EAAuC;AACrC,WAAOT,IAAIc,GAAJ,6CAA8BV,MAA9B,EAAsCC,UAAU,EAAEG,EAAF,EAAhD,EAAwDF,MAAxD,EAAgEC,OAAhE,IAAP;AACD;;AAED,SAAOP,IACJc,GADI;AAGHV,UAHG;AAIHC,cAAU,EAAEG,EAAF,EAJP;AAKHD,aAAU,EAAEQ,QAAQ,CAAE,IAAF,EAAQ,UAAR,CAAV;AALP,MAOJC,IAPI,CAOCC,QAAQ;AACZ,QAAI,CAACA,IAAL,EAAW;AAAE,aAAOA,IAAP;AAAa;;AAE1B,WAAOjB,IACJc,GADI,6CACsBV,MADtB,EAC8BC,UAAU,EAAEG,EAAF,EADxC,EACgDF,MADhD,EACwDC,OADxD,KAEJS,IAFI,CAECE,WAAW;AACf;AACA,UAAID,KAAKR,QAAL,KAAkB,CAACA,QAAvB,EAAiC;AAC/B,eAAOC,QACJS,GADI,CACA;AACH;AACA,yCAAkBnB,GAAlB,EAAuBI,MAAvB,EAA+Ba,KAAKR,QAApC,CAFG;AAGH;AACA,0CAAmBT,GAAnB,EAAwBI,MAAxB,EAAgCK,QAAhC,CAJG,CADA,EAOJO,IAPI,CAOC,MAAME,OAPP,CAAP;AAQD;;AAED,aAAOA,OAAP;AACD,KAhBI,CAAP;AAiBD,GA3BI,EA4BJE,KA5BI,CA4BE,2BAAcpB,GAAd,EAAmBH,UAAnB,CA5BF,CAAP;AA6BD","file":"update-node.js","sourcesContent":["import Schema from '../../../utils/schema';\nimport setParentLeafTrue from '../utils/set-parent-leaf-true';\nimport setParentLeafFalse from '../utils/set-parent-leaf-false';\nimport { MODULE_NAME } from './../constants';\nimport {\n  PIN_LIST_FIND_ONE,\n  PIN_LIST_UPDATE\n} from './../../constants';\nimport {\n  internalError,\n  propertyIsRequiredError,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'update-node' };\n\nexport default (app, middleware, plugin) => (msg) => buildUpdateTreeNode(app, middleware, msg);\n\nexport function buildUpdateTreeNode(app, middleware, { schema, criteria = {}, params = {}, options = {} }) {\n  const { id } = criteria;\n  const { parentId } = params;\n\n  if (!id) {\n    return Promise.reject(propertyIsRequiredError({ ...ERROR_INFO, property: 'criteria.id' }));\n  }\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  // Если не передали parentId - дальнейшая логика излишняя\n  if (!parentId || !isFinite(+parentId)) {\n    return app.act({ ...PIN_LIST_UPDATE, schema, criteria: { id }, params, options });\n  }\n\n  return app\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: [ 'id', 'parentId' ] }\n    })\n    .then(node => {\n      if (!node) { return node }\n\n      return app\n        .act({ ...PIN_LIST_UPDATE, schema, criteria: { id }, params, options })\n        .then(updated => {\n          // Если новый parentId не равен старому\n          if (node.parentId !== +parentId) {\n            return Promise\n              .all([\n                // Проверить остались ли у родителя дети, если нет - заменить ему leaf на true\n                setParentLeafTrue(app, schema, node.parentId),\n                // Заменить текущему родителю leaf на false если это первый его ребенок\n                setParentLeafFalse(app, schema, parentId)\n              ])\n              .then(() => updated);\n          }\n\n          return updated;\n        });\n    })\n    .catch(internalError(app, ERROR_INFO));\n}"]}