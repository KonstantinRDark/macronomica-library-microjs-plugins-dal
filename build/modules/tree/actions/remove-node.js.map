{"version":3,"sources":["../../../../src/modules/tree/actions/remove-node.js"],"names":["buildRemoveTreeNode","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","criteria","options","id","reject","property","act","fields","then","removeNode","catch","node","updateParent","result","parentId","removedRows","params"],"mappings":";;;;;;;;;;;;;;QAmBgBA,mB,GAAAA,mB;;AAnBhB;;;;AACA;;;;AACA;;AACA;;AAKA;;;;AAOA,MAAMC,aAAa,EAAEC,8BAAF,EAAuBC,QAAQ,aAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,oBAAoBI,GAApB,EAAyBC,UAAzB,EAAqCE,GAArC,C;;AAE9C,SAASP,mBAAT,CAA8BI,GAA9B,EAAmCC,UAAnC,QAAwF;AAAA,MAAvCG,MAAuC,QAAvCA,MAAuC;AAAA,2BAA/BC,QAA+B;AAAA,MAA/BA,QAA+B,iCAApB,EAAoB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,QACrFC,EADqF,GAC9EF,QAD8E,CACrFE,EADqF;;;AAG7F,MAAI,CAACA,EAAL,EAAS;AACP,WAAO,kBAAQC,MAAR,CAAe,gEAA6BX,UAA7B,IAAyCY,UAAU,aAAnD,IAAf,CAAP;AACD;;AAED,MAAI,CAACL,MAAL,EAAa;AACX,WAAO,kBAAQI,MAAR,CAAe,iCAAoBX,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAO,kBAAQI,MAAR,CAAe,+CAAkCX,UAAlC,CAAf,CAAP;AACD;;AAED;AACA,SAAOG,IACJU,GADI;AAGHN,UAHG;AAIHC,cAAU,EAAEE,EAAF,EAJP;AAKHD,aAAU,EAAEK,QAAQ,CAAE,IAAF,EAAQ,UAAR,EAAoB,MAApB,CAAV;AALP;AAOL;AAPK,GAQJC,IARI,CAQCC,WAAWb,GAAX,EAAgBO,EAAhB,EAAoBH,MAApB,EAA4BE,OAA5B,CARD,EASJQ,KATI,CASE,kCAAqBd,GAArB,EAA0BH,UAA1B,CATF,CAAP;AAUD;;AAED,SAASgB,UAAT,CAAoBb,GAApB,EAAyBO,EAAzB,EAA6BH,MAA7B,EAAqCE,OAArC,EAA8C;AAC5C,SAAOS,QAAQ;AACb,QAAI,CAACA,IAAL,EAAW;AAAE,aAAOA,IAAP;AAAa;;AAE1B,WAAOf,IACJU,GADI,qDACsBN,MADtB,EAC8BC,UAAU,EAAEE,EAAF,EADxC,EACgDD,OADhD,KAEJM,IAFI,CAECI,aAAahB,GAAb,EAAkBe,IAAlB,EAAwBR,EAAxB,EAA4BH,MAA5B,EAAoCE,OAApC,CAFD;AAGL;AAHK,KAIJM,IAJI,CAICK,UAAU,iCAAkBjB,GAAlB,EAAuBI,MAAvB,EAA+BW,KAAKG,QAApC,EACbN,IADa,CACR,MAAMK,MADE,CAJX,CAAP;AAOD,GAVD;AAWD;;AAED,SAASD,YAAT,CAAsBhB,GAAtB,EAA2Be,IAA3B,EAAiCR,EAAjC,EAAqCH,MAArC,EAA6CE,OAA7C,EAAsD;AACpD,SAAOa,eAAe;AACpB,QAAIA,WAAJ,EAAiB;AACf,UAAIC,SAAS,EAAEF,UAAUH,KAAKG,QAAjB,EAAb;AACA,aAAOlB,IAAIU,GAAJ,qDAA8BN,MAA9B,EAAsCC,UAAU,EAAEa,UAAUX,EAAZ,EAAhD,EAAkEa,MAAlE,EAA0Ed,OAA1E,IAAP;AACD;;AAED,WAAOa,WAAP;AACD,GAPD;AAQD","file":"remove-node.js","sourcesContent":["import Schema from '../../../utils/schema';\nimport setParentLeafTrue from '../utils/set-parent-leaf-true';\nimport { MODULE_NAME } from './../constants';\nimport {\n  PIN_LIST_FIND_ONE,\n  PIN_LIST_UPDATE,\n  PIN_LIST_REMOVE\n} from '../../../pins';\nimport {\n  internalErrorPromise,\n  propertyIsRequiredError,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'remove-node' };\n\nexport default (app, middleware, plugin) => (msg) => buildRemoveTreeNode(app, middleware, msg);\n\nexport function buildRemoveTreeNode (app, middleware, { schema, criteria = {}, options = {} }) {\n  const { id } = criteria;\n\n  if (!id) {\n    return Promise.reject(propertyIsRequiredError({ ...ERROR_INFO, property: 'criteria.id' }));\n  }\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  // Сначала получить свои id и parentId\n  return app\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: [ 'id', 'parentId', 'leaf' ] }\n    })\n    // Удаляем себя\n    .then(removeNode(app, id, schema, options))\n    .catch(internalErrorPromise(app, ERROR_INFO));\n}\n\nfunction removeNode(app, id, schema, options) {\n  return node => {\n    if (!node) { return node }\n\n    return app\n      .act({ ...PIN_LIST_REMOVE, schema, criteria: { id }, options })\n      .then(updateParent(app, node, id, schema, options))\n      // Проверить остались ли у родителя дети если нет - заменить ему leaf на true\n      .then(result => setParentLeafTrue(app, schema, node.parentId)\n        .then(() => result)\n      );\n  };\n}\n\nfunction updateParent(app, node, id, schema, options) {\n  return removedRows => {\n    if (removedRows) {\n      let params = { parentId: node.parentId };\n      return app.act({ ...PIN_LIST_UPDATE, schema, criteria: { parentId: id }, params, options });\n    }\n\n    return removedRows;\n  }\n}"]}