{"version":3,"sources":["../../../../../src/modules/tree/actions/find/path.js"],"names":["buildFindPathTreeNodes","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","criteria","options","id","parents","resolve","reject","act","fields","then","parent","parentId","childrenPath","sort","a","b","catch","error","push"],"mappings":";;;;;;;;;;;;;;QAagBA,sB,GAAAA,sB;;AAbhB;;;;AACA;;AACA;;AACA;;;;AAMA,MAAMC,aAAa,EAAEC,8BAAF,EAAuBC,QAAQ,WAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,uBAAuBI,GAAvB,EAA4BC,UAA5B,EAAwCE,GAAxC,C;;AAE9C,SAASP,sBAAT,CAAgCI,GAAhC,EAAqCC,UAArC,QAA0F;AAAA,MAAvCG,MAAuC,QAAvCA,MAAuC;AAAA,2BAA/BC,QAA+B;AAAA,MAA/BA,QAA+B,iCAApB,EAAoB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,QACvFC,EADuF,GAChFF,QADgF,CACvFE,EADuF;;AAE/F,QAAMC,UAAU,EAAhB;;AAEA,MAAI,CAACD,EAAL,EAAS;AACP,WAAO,kBAAQE,OAAR,CAAgBD,OAAhB,CAAP;AACD;;AAED,MAAI,CAACJ,MAAL,EAAa;AACX,WAAO,kBAAQM,MAAR,CAAe,iCAAoBb,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAO,kBAAQM,MAAR,CAAe,+CAAkCb,UAAlC,CAAf,CAAP;AACD;;AAED;AACA,SAAOG,IACJW,GADI;AAGHP,UAHG;AAIHC,cAAU,EAAEE,EAAF,EAJP;AAKHD,aAAU,EAAEM,QAAQ,CAAE,IAAF,EAAQ,UAAR,EAAoB,MAApB,CAAV;AALP,MAOJC,IAPI,CAOCC,UAAU;AAAA,UACNC,QADM,GACOD,MADP,CACNC,QADM;;AAGd;;AACA,QAAI,CAACA,QAAL,EAAe;AACb,aAAOP,OAAP;AACD;;AAED;AACA,WAAOQ,aAAahB,GAAb,EAAkBI,MAAlB,EAA0BW,QAA1B,EAAoCP,OAApC,CAAP;AACD,GAjBI,EAkBJK,IAlBI,CAkBCL,WAAWA,QAAQS,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,EAAEX,EAAF,GAAOY,EAAEZ,EAAhC,CAlBZ,EAmBJa,KAnBI,CAmBEC,SAAS,kBAAQX,MAAR,CAAe,kCAAqBV,GAArB,EAA0BH,UAA1B,EAAsCwB,KAAtC,CAAf,CAnBX,CAAP;AAoBD;;AAED;AACA;AACA;AACA,SAASL,YAAT,CAAsBhB,GAAtB,EAA2BI,MAA3B,EAA4D;AAAA,MAAzBG,EAAyB,uEAApB,IAAoB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC1D,SAAOR,IACJW,GADI;AAGHP,UAHG;AAIHC,cAAU,EAAEE,EAAF,EAJP;AAKHD,aAAU,EAAEM,QAAQ,CAAE,IAAF,EAAQ,UAAR,EAAoB,MAApB,CAAV;AALP,MAOJC,IAPI,CAOCC,UAAU;AAAA,UACNC,QADM,GACOD,MADP,CACNC,QADM;;;AAGdP,YAAQc,IAAR,CAAaR,MAAb;;AAEA;AACA,QAAI,CAACC,QAAL,EAAe;AACb,aAAOP,OAAP;AACD;;AAED;AACA,WAAOQ,aAAahB,GAAb,EAAkBI,MAAlB,EAA0BW,QAA1B,EAAoCP,OAApC,CAAP;AACD,GAnBI,CAAP;AAoBD","file":"path.js","sourcesContent":["import Schema from '../../../../utils/schema';\nimport { PIN_LIST_FIND_ONE } from '../../../../pins';\nimport { MODULE_NAME } from '../../constants';\nimport {\n  internalErrorPromise,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'find-path' };\n\nexport default (app, middleware, plugin) => (msg) => buildFindPathTreeNodes(app, middleware, msg);\n\nexport function buildFindPathTreeNodes(app, middleware, { schema, criteria = {}, options = {} }) {\n  const { id } = criteria;\n  const parents = [];\n\n  if (!id) {\n    return Promise.resolve(parents);\n  }\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  // Загружаем себя\n  return app\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: [ 'id', 'parentId', 'leaf' ] }\n    })\n    .then(parent => {\n      const { parentId } = parent;\n\n      // Если нет родителей - вернем пустой массив родителей\n      if (!parentId) {\n        return parents;\n      }\n\n      // Иначе запустим загрузку родителей\n      return childrenPath(app, schema, parentId, parents);\n    })\n    .then(parents => parents.sort((a, b) => a.id - b.id))\n    .catch(error => Promise.reject(internalErrorPromise(app, ERROR_INFO)(error)));\n}\n\n// Загружаем одну ноду по Id\n// Если нет parentId возвращаем родителей\n// Иначе вызовем этот метод с id == parentId\nfunction childrenPath(app, schema, id = null, parents = []) {\n  return app\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: [ 'id', 'parentId', 'leaf' ] }\n    })\n    .then(parent => {\n      const { parentId } = parent;\n\n      parents.push(parent);\n\n      // Если нет родителя - вернем список загруженных родителей\n      if (!parentId) {\n        return parents;\n      }\n\n      // Иначе запустим загрузку родителя\n      return childrenPath(app, schema, parentId, parents);\n    });\n}"]}