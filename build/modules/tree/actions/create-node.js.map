{"version":3,"sources":["../../../../src/modules/tree/actions/create-node.js"],"names":["buildCreateTreeNode","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","params","options","parentId","Promise","reject","act","then","node","catch"],"mappings":";;;;;;;;QAcgBA,mB,GAAAA,mB;;AAdhB;;;;AACA;;AACA;;;;AACA;;AACA;;;;AAMA,MAAMC,aAAa,EAAEC,8BAAF,EAAuBC,QAAQ,aAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,oBAAoBI,GAApB,EAAyBC,UAAzB,EAAqCE,GAArC,C;;AAE9C,SAASP,mBAAT,CAA8BI,GAA9B,EAAmCC,UAAnC,QAAsF;AAAA,MAArCG,MAAqC,QAArCA,MAAqC;AAAA,yBAA7BC,MAA6B;AAAA,MAA7BA,MAA6B,+BAApB,EAAoB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,yBAC/DD,MAD+D,CACnFE,QADmF;AAAA,QACnFA,QADmF,oCACxE,IADwE;;;AAG3F,MAAI,CAACH,MAAL,EAAa;AACX,WAAOI,QAAQC,MAAR,CAAe,iCAAoBZ,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAOI,QAAQC,MAAR,CAAe,+CAAkCZ,UAAlC,CAAf,CAAP;AACD;;AAED,SAAOG,IACJU,GADI,uCACsBN,MADtB,EAC8BC,qBAAaA,MAAb,IAAqBE,QAArB,GAD9B,EAC+DD,OAD/D,KAEJK,IAFI,CAECC,QAAQ,kCAAmBZ,GAAnB,EAAwBI,MAAxB,EAAgCG,QAAhC,EACXI,IADW,CACN,MAAMC,IADA,CAFT,EAKJC,KALI,CAKE,2BAAcb,GAAd,EAAmBH,UAAnB,CALF,CAAP;AAMD","file":"create-node.js","sourcesContent":["import Schema from './../../../utils/schema';\nimport { PIN_LIST_CREATE } from '../../../pins';\nimport setParentLeafFalse from '../utils/set-parent-leaf-false';\nimport { MODULE_NAME } from './../constants';\nimport {\n  internalError,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'create-node' };\n\nexport default (app, middleware, plugin) => (msg) => buildCreateTreeNode(app, middleware, msg);\n\nexport function buildCreateTreeNode (app, middleware, { schema, params = {}, options = {} }) {\n  const { parentId = null } = params;\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return app\n    .act({ ...PIN_LIST_CREATE, schema, params: { ...params, parentId }, options })\n    .then(node => setParentLeafFalse(app, schema, parentId)\n      .then(() => node)\n    )\n    .catch(internalError(app, ERROR_INFO));\n}"]}