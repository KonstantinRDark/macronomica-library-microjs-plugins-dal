{"version":3,"sources":["../../../../../src/modules/list/actions/find/list.js"],"names":["buildFindList","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","criteria","options","outer","fields","sort","limit","offset","Promise","reject","resolve","__fields","getMyFields","builder","tableName","getMyCriteriaParams","select","orderKey","orderDirection","split","includes","toLowerCase","orderBy","then","result","Array","isArray","records","map","assignLinksToMany","act","pin","catch"],"mappings":"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","file":"list.js","sourcesContent":["import dot from 'dot-object';\nimport isString from 'lodash.isstring';\nimport Schema from './../../../../utils/schema';\nimport isNumber from 'lodash.isnumber';\nimport setCriteria from './../../../../utils/set-criteria';\nimport checkLinks from './../../../../utils/check-links';\nimport convertToResponse from './../../../../utils/convert-to-response';\nimport { MODULE_NAME } from './../../constants';\nimport {\n  internalErrorPromise,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'find-list' };\n\nexport default (app, middleware, plugin) => (msg) => buildFindList(app, middleware, msg);\n\nexport function buildFindList(app, middleware, msg) {\n  let { schema, criteria = {}, options = {} } = msg;\n  const {\n    outer = false,\n    fields,\n    sort = 'id',\n    limit,\n    offset,\n  } = options;\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    let __fields = schema.getMyFields(fields);\n    let builder = setCriteria(\n      app,\n      middleware(schema.tableName),\n      schema.getMyCriteriaParams(criteria),\n      reject\n    ).select(...__fields);\n\n    if (sort) {\n      let orderKey;\n      let orderDirection;\n\n      if (isString(sort)) {\n        [ orderKey, orderDirection = 'asc' ] = sort.split(' ');\n\n        orderDirection = [ 'asc', 'desc' ].includes(orderDirection.toLowerCase())\n          ? orderDirection.toLowerCase()\n          : 'asc';\n      }\n\n      if (orderKey && orderDirection) {\n        builder = builder.orderBy(orderKey, orderDirection);\n      }\n    }\n\n    if (limit && isNumber(limit)) {\n      builder = builder.limit(limit);\n    }\n\n    if (offset && isNumber(offset)) {\n      builder = builder.offset(offset);\n    }\n\n    if (outer) {\n      // Если кто-то сам хочет запускать запрос - вернем builder\n      // Возвращаем как объект - иначе происходит исполнение данного builder'a\n      return resolve({ builder });\n    }\n\n    builder\n      .then((result = []) => new Promise(async resolve => {\n        if (!result || !Array.isArray(result)) {\n          return (result);\n        }\n\n        const records = result.map(convertToResponse(schema, __fields));\n        \n        await schema.assignLinksToMany(records, pin => msg.act(pin));\n        resolve(records);\n      }))\n      .then(resolve)\n      .catch(internalErrorPromise(app, ERROR_INFO))\n      .catch(reject);\n  });\n}"]}