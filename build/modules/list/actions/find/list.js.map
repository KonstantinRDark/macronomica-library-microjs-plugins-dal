{"version":3,"sources":["../../../../../src/modules/list/actions/find/list.js"],"names":["buildFindList","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","criteria","options","transaction","outer","fields","sort","limit","offset","convertOuts","properties","Promise","reject","resolve","builder","tableName","getMyParams","select","getMyFields","orderKey","orderDirection","split","includes","toLowerCase","orderBy","then","result","length","map","item","name","callback","row","catch"],"mappings":"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","file":"list.js","sourcesContent":["import isString from 'lodash.isstring';\nimport Schema from './../../../../utils/schema';\nimport isNumber from 'lodash.isnumber';\nimport setCriteria from './../../../../utils/set-criteria';\nimport checkConvertOut from './../../../../utils/check-convert-out';\nimport { MODULE_NAME } from './../../constants';\nimport {\n  internalErrorPromise,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'find-list' };\n\nexport default (app, middleware, plugin) => (msg) => buildFindList(app, middleware, msg);\n\nexport function buildFindList(app, middleware, { schema, criteria = {}, options = {} }) {\n  const {\n    transaction,\n    outer = false,\n    fields,\n    sort = 'id',\n    limit,\n    offset,\n  } = options;\n\n  const convertOuts = checkConvertOut(schema.properties);\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    let builder = setCriteria(\n      app,\n      middleware(schema.tableName),\n      schema.getMyParams(criteria),\n      reject\n    ).select(...schema.getMyFields(fields));\n\n    if (sort) {\n      let orderKey;\n      let orderDirection;\n\n      if (isString(sort)) {\n        [ orderKey, orderDirection = 'asc' ] = sort.split(' ');\n\n        orderDirection = [ 'asc', 'desc' ].includes(orderDirection.toLowerCase())\n          ? orderDirection.toLowerCase()\n          : 'asc';\n      }\n\n      if (orderKey && orderDirection) {\n        builder = builder.orderBy(orderKey, orderDirection);\n      }\n    }\n\n    if (limit && isNumber(limit)) {\n      builder = builder.limit(limit);\n    }\n\n    if (offset && isNumber(offset)) {\n      builder = builder.offset(offset);\n    }\n    /*\n    if (transaction) {\n      // Если передали внешнюю транзакцию - привяжемся к ней\n      builder = builder.transacting(transaction);\n    }\n    */\n    if (/*transaction || */outer) {\n      // Если передали внешнюю транзакцию или кто-то сам хочет запускать запрос - вернем builder\n      return resolve(builder);\n    }\n\n    builder\n      .then((result = []) => {\n        if (convertOuts.length > 0) {\n          result = result.map(item => {\n\n            for (let { name, callback } of convertOuts) {\n              item[ name ] = callback(item[ name ], schema.properties[ name ]);\n            }\n\n            return item;\n          });\n        }\n\n        resolve(result.map(row => ({ ...row })));\n      })\n      .catch(internalErrorPromise(app, ERROR_INFO))\n      .catch(reject);\n  });\n}"]}