{"version":3,"sources":["../../../../src/modules/list/actions/count.js"],"names":["buildCount","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","criteria","options","transaction","outer","reject","resolve","getMyCriteriaParams","builder","tableName","count","then","result","catch","error"],"mappings":";;;;;;;;;;;;;;QAagBA,U,GAAAA,U;;AAbhB;;;;AACA;;;;AACA;;AACA;;;;AAMA,MAAMC,aAAa,EAAEC,8BAAF,EAAuBC,QAAQ,OAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,WAAWI,GAAX,EAAgBC,UAAhB,EAA4BE,GAA5B,C;;AAE9C,SAASP,UAAT,CAAqBI,GAArB,EAA0BC,UAA1B,QAA+E;AAAA,MAAvCG,MAAuC,QAAvCA,MAAuC;AAAA,2BAA/BC,QAA+B;AAAA,MAA/BA,QAA+B,iCAApB,EAAoB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,QAElFC,WAFkF,GAIhFD,OAJgF,CAElFC,WAFkF;AAAA,uBAIhFD,OAJgF,CAGlFE,KAHkF;AAAA,QAGlFA,KAHkF,kCAG1E,KAH0E;;;AAMpF,MAAI,CAACJ,MAAL,EAAa;AACX,WAAO,kBAAQK,MAAR,CAAe,iCAAoBZ,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAO,kBAAQK,MAAR,CAAe,+CAAkCZ,UAAlC,CAAf,CAAP;AACD;;AAED,SAAO,sBAAY,CAACa,OAAD,EAAUD,MAAV,KAAqB;AACtCJ,eAAWD,OAAOO,mBAAP,CAA2BN,QAA3B,CAAX;;AAEA,QAAIO,UAAU,2BAAYZ,GAAZ,EAAiBC,WAAWG,OAAOS,SAAlB,CAAjB,EAA+CR,QAA/C,EAAyDI,MAAzD,EAAiEK,KAAjE,EAAd;AACA;;;;;;AAMA,SAAI,mBAAmBN,KAAvB,EAA8B;AAC5B;AACA;AACA,aAAOE,QAAQ,EAAEE,OAAF,EAAR,CAAP;AACD;;AAED,WAAOA;AACL;AADK,KAEJG,IAFI,CAEC;AAAA;;AAAA,UAAGC,MAAH;AAAA,aAAiB,EAAEF,OAAOE,OAAOF,KAAP,IAAgBE,OAAQ,UAAR,CAAzB,EAAjB;AAAA,KAFD,EAGJD,IAHI,CAGCL,OAHD,EAIJO,KAJI,CAIEC,SAAST,OAAO,kCAAqBT,GAArB,EAA0BH,UAA1B,EAAsCqB,KAAtC,CAAP,CAJX,CAAP;AAKD,GArBM,CAAP;AAsBD","file":"count.js","sourcesContent":["import Schema from './../../../utils/schema';\nimport setCriteria from './../../../utils/set-criteria';\nimport { MODULE_NAME } from './../constants';\nimport {\n  internalErrorPromise,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'count' };\n\nexport default (app, middleware, plugin) => (msg) => buildCount(app, middleware, msg);\n\nexport function buildCount (app, middleware, { schema, criteria = {}, options = {} }) {\n  const {\n    transaction,\n    outer = false\n  } = options;\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    criteria = schema.getMyCriteriaParams(criteria);\n\n    let builder = setCriteria(app, middleware(schema.tableName), criteria, reject).count();\n    /*\n    if (transaction) {\n      // Если передали внешнюю транзакцию - привяжемся к ней\n      builder = builder.transacting(transaction);\n    }\n    */\n    if (/*transaction || */outer) {\n      // Если передали внешнюю транзакцию или кто-то сам хочет запускать запрос - вернем builder\n      // Возвращаем как объект - иначе происходит исполнение данного builder'a\n      return resolve({ builder });\n    }\n\n    return builder\n      // Заглушка count(*) для sqllite3\n      .then(([ result ]) => ({ count: result.count || result[ 'count(*)' ] }))\n      .then(resolve)\n      .catch(error => reject(internalErrorPromise(app, ERROR_INFO)(error)));\n  });\n}"]}