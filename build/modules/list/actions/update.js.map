{"version":3,"sources":["../../../../src/modules/list/actions/update.js"],"names":["buildUpdate","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","criteria","params","options","transaction","outer","fields","__fields","getMyFields","Promise","resolve","reject","getMyParams","act","then","count","builder","tableName","update","returning","result","Array","isArray","map","catch"],"mappings":";;;;;;;;QAiBgBA,W,GAAAA,W;;AAjBhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAMA,MAAMC,aAAa,EAAEC,+BAAF,EAAuBC,QAAQ,QAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,YAAYI,GAAZ,EAAiBC,UAAjB,EAA6BE,GAA7B,C;;AAE9C,SAASP,WAAT,CAAsBI,GAAtB,EAA2BC,UAA3B,QAA6F;AAAA,MAApDG,MAAoD,QAApDA,MAAoD;AAAA,2BAA5CC,QAA4C;AAAA,MAA5CA,QAA4C,iCAAjC,EAAiC;AAAA,yBAA7BC,MAA6B;AAAA,MAA7BA,MAA6B,+BAApB,EAAoB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,QAC1FC,WAD0F,GACnDD,OADmD,CAC1FC,WAD0F;AAAA,uBACnDD,OADmD,CAC7EE,KAD6E;AAAA,QAC7EA,KAD6E,kCACrE,KADqE;AAAA,QAC9DC,MAD8D,GACnDH,OADmD,CAC9DG,MAD8D;;AAElG,QAAMC,WAAWP,OAAOQ,WAAP,CAAmBF,MAAnB,CAAjB;;AAEA,MAAI,CAACJ,MAAL,EAAa;AACX,WAAOO,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,MAAI,CAACV,MAAL,EAAa;AACX,WAAOS,QAAQE,MAAR,CAAe,iCAAoBlB,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAOS,QAAQE,MAAR,CAAe,+CAAkClB,UAAlC,CAAf,CAAP;AACD;;AAED,SAAO,IAAIgB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,eAAWD,OAAOY,WAAP,CAAmBX,QAAnB,CAAX;;AAEA,QAAI,sBAAQA,QAAR,CAAJ,EAAuB;AACrB,aAAOS,QAAQ,IAAR,CAAP;AACD;;AAED;AACAd,QACGiB,GADH,4CAC6Bb,MAD7B,EACqCC,QADrC,KAEGa,IAFH,CAEQ,WAAe;AAAA,UAAZC,KAAY,SAAZA,KAAY;;AACnB;AACA,UAAIA,UAAU,CAAd,EAAiB;AACf,eAAO,IAAP;AACD;;AAED,UAAIC,UAAU,2BAAYpB,GAAZ,EAAiBC,WAAWG,OAAOiB,SAAlB,CAAjB,EAA+ChB,QAA/C,EAAyDU,MAAzD,EACXO,MADW,CACJ,yBAAUtB,GAAV,EAAeI,MAAf,EAAuBE,MAAvB,EAA+BS,MAA/B,CADI,EAEXQ,SAFW,CAED,GAAGZ,QAFF,CAAd;AAGA;;;;;;AAMA,WAAI,mBAAmBF,KAAvB,EAA8B;AAC5B;AACA,eAAOW,OAAP;AACD;;AAED,aAAOA,QACJF,IADI,CACCM,UAAU;AACd,YAAI,CAACA,MAAL,EAAa;AACX,iBAAOA,MAAP;AACD;;AAED,YAAIC,MAAMC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,iBAAOA,OAAOG,GAAP,CAAW,iCAAkBvB,MAAlB,EAA0BO,QAA1B,CAAX,CAAP;AACD;;AAED,eAAO,iCAAkBP,MAAlB,EAA0BO,QAA1B,EAAoCa,MAApC,CAAP;AACD,OAXI,EAYJI,KAZI,CAYE,2BAAc5B,GAAd,EAAmBH,UAAnB,CAZF,CAAP;AAaD,KAnCH,EAoCGqB,IApCH,CAoCQJ,OApCR,EAqCGc,KArCH,CAqCSb,MArCT;AAsCD,GA9CM,CAAP;AA+CD","file":"update.js","sourcesContent":["import isEmpty from 'lodash.isempty';\nimport Schema from './../../../utils/schema';\nimport setCriteria from './../../../utils/set-criteria';\nimport setParams from './../../../utils/set-params';\nimport convertToResponse from './../../../utils/convert-to-response';\nimport { PIN_LIST_COUNTS } from '../../constants';\nimport { MODULE_NAME } from './../constants';\nimport {\n  internalError,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'update' };\n\nexport default (app, middleware, plugin) => (msg) => buildUpdate(app, middleware, msg);\n\nexport function buildUpdate (app, middleware, { schema, criteria = {}, params = {}, options = {} }) {\n  const { transaction, outer = false, fields } = options;\n  const __fields = schema.getMyFields(fields);\n\n  if (!params) {\n    return Promise.resolve(null);\n  }\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    criteria = schema.getMyParams(criteria);\n\n    if (isEmpty(criteria)) {\n      return resolve(null);\n    }\n\n    // Узнаем кол-во обновляемых строк\n    app\n      .act({ ...PIN_LIST_COUNTS, schema, criteria })\n      .then(({ count }) => {\n        // Если равно 0 - то и обновлять не стоит\n        if (count === 0) {\n          return null;\n        }\n\n        let builder = setCriteria(app, middleware(schema.tableName), criteria, reject)\n          .update(setParams(app, schema, params, reject))\n          .returning(...__fields);\n        /*\n        if (transaction) {\n          // Если передали внешнюю транзакцию - привяжемся к ней\n          builder = builder.transacting(transaction);\n        }\n        */\n        if (/*transaction || */outer) {\n          // Если передали внешнюю транзакцию или кто-то сам хочет запускать запрос - вернем builder\n          return builder;\n        }\n\n        return builder\n          .then(result => {\n            if (!result) {\n              return result;\n            }\n\n            if (Array.isArray(result)) {\n              return result.map(convertToResponse(schema, __fields));\n            }\n\n            return convertToResponse(schema, __fields)(result);\n          })\n          .catch(internalError(app, ERROR_INFO));\n      })\n      .then(resolve)\n      .catch(reject);\n  });\n}"]}