{"version":3,"sources":["../../../../src/modules/list/actions/update.js"],"names":["buildUpdate","ERROR_INFO","module","action","SetParamsInternalError","message","type","code","app","middleware","plugin","msg","schema","criteria","params","options","transaction","outer","fields","__fields","getMyFields","resolve","reject","getMyCriteriaParams","act","then","count","__params","setParams","log","debug","old","new","e","error","builder","tableName","update","returning","result","Array","isArray","map","catch"],"mappings":"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","file":"update.js","sourcesContent":["import TypedError from 'error/typed';\nimport isEmpty from 'lodash.isempty';\nimport Schema from './../../../utils/schema';\nimport setCriteria from './../../../utils/set-criteria';\nimport convertToResponse from './../../../utils/convert-to-response';\nimport { PIN_LIST_COUNTS } from '../../../pins';\nimport { MODULE_NAME } from './../constants';\nimport {\n  internalErrorPromise,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'update' };\nconst SetParamsInternalError = TypedError({\n  message: '{name} - параметры для создания записи не корректны',\n  type   : 'micro.plugins.dal.schema.set-params.params.not.correct',\n  code   : 500\n});\n\nexport default (app, middleware, plugin) => (msg) => buildUpdate(app, middleware, msg);\n\nexport function buildUpdate (app, middleware, { schema, criteria = {}, params = {}, options = {} }) {\n  const { transaction, outer = false, fields } = options;\n  const __fields = schema.getMyFields(fields);\n\n  if (!params) {\n    return Promise.resolve(null);\n  }\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    criteria = schema.getMyCriteriaParams(criteria);\n\n    if (isEmpty(criteria)) {\n      return resolve(null);\n    }\n\n    // Узнаем кол-во обновляемых строк\n    app\n      .act({ ...PIN_LIST_COUNTS, schema, criteria })\n      .then(({ count }) => {\n        // Если равно 0 - то и обновлять не стоит\n        if (count === 0) {\n          return null;\n        }\n\n        let __params;\n        \n        try {\n          __params = schema.setParams(params);\n          app.log.debug('micro.plugins.dal.update', { criteria, params: { old: params, new: __params } });\n        } catch (e) {\n          if (e.type === 'micro.plugins.dal.schema.validate.error') {\n            return reject(e);\n          }\n\n          app.log.error(e);\n          return reject(SetParamsInternalError());\n        }\n\n        let builder = setCriteria(app, middleware(schema.tableName), criteria, reject)\n          .update(__params)\n          .returning(...__fields);\n\n        if (outer) {\n          // Если кто-то сам хочет запускать запрос - вернем builder\n          // Возвращаем как объект - иначе происходит исполнение данного builder'a\n          return resolve({ builder });\n        }\n\n        return builder\n          .then(result => {\n            if (!result) {\n              return result;\n            }\n\n            if (Array.isArray(result)) {\n              return result.map(convertToResponse(schema, __fields));\n            }\n\n            return convertToResponse(schema, __fields)(result);\n          })\n          .catch(error => reject(internalErrorPromise(app, ERROR_INFO)(error)));\n      })\n      .then(resolve)\n      .catch(reject);\n  });\n}"]}