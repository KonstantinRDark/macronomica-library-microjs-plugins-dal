{"version":3,"sources":["../../../../src/modules/list/actions/create.js"],"names":["buildCreate","ERROR_INFO","module","action","SetParamsInternalError","message","type","code","app","middleware","plugin","msg","schema","params","options","outer","fields","isBulkInsert","Array","isArray","__fields","getMyFields","Promise","reject","resolve","builder","__params","map","setParams","e","log","error","transaction","trx","bulkCreate","tableName","then","commit","catch","rollback","insert","returning","result","transacting","ids","max","reduce","id","raw"],"mappings":"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","file":"create.js","sourcesContent":["import TypedError from 'error/typed';\nimport convertToResponse from './../../../utils/convert-to-response';\nimport Schema from './../../../utils/schema';\nimport { MODULE_NAME } from './../constants';\nimport {\n  internalErrorPromise,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'create' };\nconst SetParamsInternalError = TypedError({\n  message: '{name} - параметры для создания записи не корректны',\n  type   : 'micro.plugins.dal.schema.set-params.params.not.correct',\n  code   : 500\n});\n\nexport default (app, middleware, plugin) => (msg) => buildCreate(app, middleware, msg);\n\nexport function buildCreate (app, middleware, { schema, params, options = {} }) {\n  const { outer = false, fields } = options;\n  const isBulkInsert = Array.isArray(params);\n  const __fields = schema.getMyFields(fields);\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    let builder;\n    let __params;\n\n    try {\n      __params = isBulkInsert\n        ? params.map(params => schema.setParams(params))\n        : schema.setParams(params);\n    } catch (e) {\n      if (e.type === 'micro.plugins.dal.schema.validate.error') {\n        return reject(e);\n      }\n\n      app.log.error(e);\n      return reject(SetParamsInternalError());\n    }\n\n    // Создание множества записей\n    if (isBulkInsert) {\n        // Создаем свою transaction\n        builder = middleware.transaction(trx =>\n          bulkCreate(middleware, schema.tableName, __params, __fields, trx, reject)\n            .then(trx.commit)\n            .catch(trx.rollback)\n        );\n    }\n    // Создание одной записи\n    else {\n      builder = middleware(schema.tableName)\n        .insert(__params)\n        .returning(...__fields);\n    }\n\n    if (outer) {\n      // Если кто-то сам хочет запускать запрос - вернем builder\n      // Возвращаем как объект - иначе происходит исполнение данного builder'a\n      return resolve({ builder });\n    }\n\n    // Иначе вызовем его выполнение\n    builder\n      .then(result => {\n        if (!result) {\n          return result;\n        }\n\n        if (isBulkInsert) {\n          return result.map(convertToResponse(schema, __fields));\n        }\n\n        return convertToResponse(schema, __fields)(result);\n      })\n      .then(resolve)\n      .catch(internalErrorPromise(app, ERROR_INFO))\n      .catch(reject);\n  });\n}\n\nfunction bulkCreate(middleware, tableName, params = [], fields, trx) {\n  return middleware(tableName)\n    .insert(params)\n    .returning(...fields)\n    .transacting(trx)\n    .then(function(ids = []) {\n      const max = ids.reduce((max, id) => max < id ? id : max, 0);\n      return middleware\n        .raw(`ALTER SEQUENCE \"${ tableName }_id_seq\" RESTART WITH ${ max };`)\n        .then(() => ids);\n    });\n}"]}