{"version":3,"sources":["../../../../src/modules/list/actions/create.js"],"names":["buildCreate","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","params","options","transaction","outer","fields","isBulkInsert","Array","isArray","__fields","getMyFields","Promise","reject","resolve","builder","trx","bulkCreate","then","commit","catch","rollback","tableName","insert","returning","result","map","transacting","ids","max","reduce","id","raw"],"mappings":";;;;;QAcgBA,W,GAAAA,W;;AAdhB;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAMA,MAAMC,aAAa,EAAEC,8BAAF,EAAuBC,QAAQ,QAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,YAAYI,GAAZ,EAAiBC,UAAjB,EAA6BE,GAA7B,C;;AAE9C,SAASP,WAAT,CAAsBI,GAAtB,EAA2BC,UAA3B,QAAyE;AAAA,MAAhCG,MAAgC,QAAhCA,MAAgC;AAAA,MAAxBC,MAAwB,QAAxBA,MAAwB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,QACtEC,WADsE,GAC/BD,OAD+B,CACtEC,WADsE;AAAA,uBAC/BD,OAD+B,CACzDE,KADyD;AAAA,QACzDA,KADyD,kCACjD,KADiD;AAAA,QAC1CC,MAD0C,GAC/BH,OAD+B,CAC1CG,MAD0C;;AAE9E,QAAMC,eAAeC,MAAMC,OAAN,CAAcP,MAAd,CAArB;AACA,QAAMQ,WAAWT,OAAOU,WAAP,CAAmBL,MAAnB,CAAjB;;AAEA,MAAI,CAACL,MAAL,EAAa;AACX,WAAOW,QAAQC,MAAR,CAAe,iCAAoBnB,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAOW,QAAQC,MAAR,CAAe,+CAAkCnB,UAAlC,CAAf,CAAP;AACD;;AAED,SAAO,IAAIkB,OAAJ,CAAY,CAACE,OAAD,EAAUD,MAAV,KAAqB;AACtC,QAAIE,OAAJ;;AAEA;AACA,QAAIR,YAAJ,EAAkB;AAChB;;;;;;AAME;AACAQ,gBAAUjB,WAAWM,WAAX,CAAuBY,OAAOC,WAAWpB,GAAX,EAAgBC,UAAhB,EAA4BG,MAA5B,EAAoCC,MAApC,EAA4CQ,QAA5C,EAAsDM,GAAtD,EAA2DH,MAA3D,EACrCK,IADqC,CAChCF,IAAIG,MAD4B,EAErCC,KAFqC,CAE/BJ,IAAIK,QAF2B,CAA9B,CAAV;AAIF;;;AAGD;AACD;AAhBA,SAiBK;AACHN,kBAAUjB,WAAWG,OAAOqB,SAAlB,EACPC,MADO,CACA,yBAAU1B,GAAV,EAAeI,MAAf,EAAuBC,MAAvB,EAA+BW,MAA/B,CADA,EAEPW,SAFO,CAEG,GAAGd,QAFN,CAAV;AAGA;;;;;;AAMD;;AAED,SAAI,kBAAmBL,KAAvB,EAA8B;AAC5B;AACA;AACA,aAAOS,QAAQ,EAAEC,OAAF,EAAR,CAAP;AACD;;AAED;AACAA,YACGG,IADH,CACQO,UAAU;AACd,UAAI,CAACA,MAAL,EAAa;AACX,eAAOA,MAAP;AACD;;AAED,UAAIlB,YAAJ,EAAkB;AAChB,eAAOkB,OAAOC,GAAP,CAAW,iCAAkBzB,MAAlB,EAA0BS,QAA1B,CAAX,CAAP;AACD;;AAED,aAAO,iCAAkBT,MAAlB,EAA0BS,QAA1B,EAAoCe,MAApC,CAAP;AACD,KAXH,EAYGP,IAZH,CAYQJ,OAZR,EAaGM,KAbH,CAaS,kCAAqBvB,GAArB,EAA0BH,UAA1B,CAbT,EAcG0B,KAdH,CAcSP,MAdT;AAeD,GAvDM,CAAP;AAwDD;;AAED,SAASI,UAAT,CAAoBpB,GAApB,EAAyBC,UAAzB,EAAqCG,MAArC,EAA+E;AAAA,MAAlCC,MAAkC,uEAAzB,EAAyB;AAAA,MAArBI,MAAqB;AAAA,MAAbU,GAAa;AAAA,MAARH,MAAQ;;AAC7E,SAAOf,WAAWG,OAAOqB,SAAlB,EACJC,MADI,CACGrB,OAAOwB,GAAP,CAAWxB,UAAU,yBAAUL,GAAV,EAAeI,MAAf,EAAuBC,MAAvB,EAA+BW,MAA/B,CAArB,CADH,EAEJW,SAFI,CAEM,GAAGlB,MAFT,EAGJqB,WAHI,CAGQX,GAHR,EAIJE,IAJI,CAIC,YAAmB;AAAA,QAAVU,GAAU,uEAAJ,EAAI;;AACvB,UAAMC,MAAMD,IAAIE,MAAJ,CAAW,CAACD,GAAD,EAAME,EAAN,KAAaF,MAAME,EAAN,GAAWA,EAAX,GAAgBF,GAAxC,EAA6C,CAA7C,CAAZ;AACA,WAAO/B,WACJkC,GADI,CACC,oBAAmB/B,OAAOqB,SAAW,2BAAyBO,GAAK,IADpE,EAEJX,IAFI,CAEC,MAAMU,GAFP,CAAP;AAGD,GATI,CAAP;AAUD","file":"create.js","sourcesContent":["import setParams from './../../../utils/set-params';\nimport convertToResponse from './../../../utils/convert-to-response';\nimport Schema from './../../../utils/schema';\nimport { MODULE_NAME } from './../constants';\nimport {\n  internalErrorPromise,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'create' };\n\nexport default (app, middleware, plugin) => (msg) => buildCreate(app, middleware, msg);\n\nexport function buildCreate (app, middleware, { schema, params, options = {} }) {\n  const { transaction, outer = false, fields } = options;\n  const isBulkInsert = Array.isArray(params);\n  const __fields = schema.getMyFields(fields);\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    let builder;\n\n    // Создание множества записей\n    if (isBulkInsert) {\n      /*\n      if (transaction) {\n        // Если передали внешнюю транзакцию - привяжемся к ней\n        builder = bulkCreate(app, middleware, schema, params, __fields, transaction, reject);\n      } else {\n      */\n        // Создаем свою\n        builder = middleware.transaction(trx => bulkCreate(app, middleware, schema, params, __fields, trx, reject)\n          .then(trx.commit)\n          .catch(trx.rollback)\n        );\n      /*\n      }\n      */\n    }\n    // Создание одной записи\n    else {\n      builder = middleware(schema.tableName)\n        .insert(setParams(app, schema, params, reject))\n        .returning(...__fields);\n      /*\n      if (transaction) {\n        // Если передали внешнюю транзакцию - привяжемся к ней\n        builder = builder.transacting(transaction);\n      }\n      */\n    }\n\n    if (/*transaction ||*/ outer) {\n      // Если передали внешнюю транзакцию или кто-то сам хочет запускать запрос - вернем builder\n      // Возвращаем как объект - иначе происходит исполнение данного builder'a\n      return resolve({ builder });\n    }\n\n    // Иначе вызовем его выполнение\n    builder\n      .then(result => {\n        if (!result) {\n          return result;\n        }\n\n        if (isBulkInsert) {\n          return result.map(convertToResponse(schema, __fields));\n        }\n\n        return convertToResponse(schema, __fields)(result);\n      })\n      .then(resolve)\n      .catch(internalErrorPromise(app, ERROR_INFO))\n      .catch(reject);\n  });\n}\n\nfunction bulkCreate(app, middleware, schema, params = [], fields, trx, reject) {\n  return middleware(schema.tableName)\n    .insert(params.map(params => setParams(app, schema, params, reject)))\n    .returning(...fields)\n    .transacting(trx)\n    .then(function(ids = []) {\n      const max = ids.reduce((max, id) => max < id ? id : max, 0);\n      return middleware\n        .raw(`ALTER SEQUENCE \"${ schema.tableName }_id_seq\" RESTART WITH ${ max };`)\n        .then(() => ids);\n    });\n}"]}