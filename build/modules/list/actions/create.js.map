{"version":3,"sources":["../../../../src/modules/list/actions/create.js"],"names":["buildCreate","ERROR_INFO","module","action","app","middleware","plugin","msg","schema","params","options","transaction","outer","fields","isBulkInsert","Array","isArray","Promise","resolve","reject","builder","trx","bulkCreate","then","commit","catch","rollback","tableName","insert","returning","getMyFields","map","transacting","ids","max","reduce","id","raw"],"mappings":";;;;;QAagBA,W,GAAAA,W;;AAbhB;;;;AACA;;;;AACA;;AACA;;;;AAMA,MAAMC,aAAa,EAAEC,8BAAF,EAAuBC,QAAQ,QAA/B,EAAnB;;kBAEe,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,KAA8BC,GAAD,IAASP,YAAYI,GAAZ,EAAiBC,UAAjB,EAA6BE,GAA7B,C;;AAE9C,SAASP,WAAT,CAAsBI,GAAtB,EAA2BC,UAA3B,QAA8E;AAAA,MAArCG,MAAqC,QAArCA,MAAqC;AAAA,yBAA7BC,MAA6B;AAAA,MAA7BA,MAA6B,+BAApB,EAAoB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,gCAAN,EAAM;AAAA,QAC3EC,WAD2E,GACpCD,OADoC,CAC3EC,WAD2E;AAAA,uBACpCD,OADoC,CAC9DE,KAD8D;AAAA,QAC9DA,KAD8D,kCACtD,KADsD;AAAA,QAC/CC,MAD+C,GACpCH,OADoC,CAC/CG,MAD+C;;AAEnF,QAAMC,eAAeC,MAAMC,OAAN,CAAcP,MAAd,CAArB;;AAEA,MAAI,CAACA,MAAL,EAAa;AACX,WAAOQ,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,MAAI,CAACV,MAAL,EAAa;AACX,WAAOS,QAAQE,MAAR,CAAe,iCAAoBlB,UAApB,CAAf,CAAP;AACD;;AAED,MAAI,EAAEO,kCAAF,CAAJ,EAAiC;AAC/B,WAAOS,QAAQE,MAAR,CAAe,+CAAkClB,UAAlC,CAAf,CAAP;AACD;;AAED,SAAO,IAAIgB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,OAAJ;;AAEA;AACA,QAAIN,YAAJ,EAAkB;AAChB;;;;;;AAME;AACAM,gBAAUf,WAAWM,WAAX,CAAuBU,OAAOC,WAAWlB,GAAX,EAAgBC,UAAhB,EAA4BG,MAA5B,EAAoCC,MAApC,EAA4CI,MAA5C,EAAoDQ,GAApD,EAAyDF,MAAzD,EACrCI,IADqC,CAChCF,IAAIG,MAD4B,EAErCC,KAFqC,CAE/BJ,IAAIK,QAF2B,CAA9B,CAAV;AAIF;;;AAGD;AACD;AAhBA,SAiBK;AACHN,kBAAUf,WAAWG,OAAOmB,SAAlB,EACPC,MADO,CACA,yBAAUxB,GAAV,EAAeI,MAAf,EAAuBC,MAAvB,EAA+BU,MAA/B,CADA,EAEPU,SAFO,CAEG,GAAGrB,OAAOsB,WAAP,CAAmBjB,MAAnB,CAFN,CAAV;AAGA;;;;;;AAMD;;AAED,SAAI,kBAAmBD,KAAvB,EAA8B;AAC5B;AACA,aAAOM,QAAQE,OAAR,CAAP;AACD;;AAED;AACAA,YACGG,IADH,CACQL,OADR,EAEGO,KAFH,CAES,2BAAcrB,GAAd,EAAmBH,UAAnB,CAFT,EAGGwB,KAHH,CAGSN,MAHT;AAID,GA3CM,CAAP;AA4CD;;AAED,SAASG,UAAT,CAAoBlB,GAApB,EAAyBC,UAAzB,EAAqCG,MAArC,EAA6CC,MAA7C,EAAqDI,MAArD,EAA6DQ,GAA7D,EAAkEF,MAAlE,EAA0E;AACxE,SAAOd,WAAWG,OAAOmB,SAAlB,EACJC,MADI,CACGnB,OAAOsB,GAAP,CAAWtB,UAAU,yBAAUL,GAAV,EAAeI,MAAf,EAAuBC,MAAvB,EAA+BU,MAA/B,CAArB,CADH,EAEJU,SAFI,CAEM,GAAGrB,OAAOsB,WAAP,CAAmBjB,MAAnB,CAFT,EAGJmB,WAHI,CAGQX,GAHR,EAIJE,IAJI,CAIC,UAASU,GAAT,EAAc;AAClB,UAAMC,MAAMD,IAAIE,MAAJ,CAAW,CAACD,GAAD,EAAME,EAAN,KAAaF,MAAME,EAAN,GAAWA,EAAX,GAAgBF,GAAxC,EAA6C,CAA7C,CAAZ;AACA,WAAO7B,WACJgC,GADI,CACC,mBAAkB7B,OAAOmB,SAAW,0BAAwBO,GAAK,IADlE,EAEJX,IAFI,CAEC,MAAMU,GAFP,CAAP;AAGD,GATI,CAAP;AAUD","file":"create.js","sourcesContent":["import setParams from './../../../utils/set-params';\nimport Schema from './../../../utils/schema';\nimport { MODULE_NAME } from './../constants';\nimport {\n  internalError,\n  schemaNotFoundError,\n  schemaNotInstanceSchemaClassError\n} from '../../../errors';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: 'create' };\n\nexport default (app, middleware, plugin) => (msg) => buildCreate(app, middleware, msg);\n\nexport function buildCreate (app, middleware, { schema, params = {}, options = {} }) {\n  const { transaction, outer = false, fields } = options;\n  const isBulkInsert = Array.isArray(params);\n\n  if (!params) {\n    return Promise.resolve(null);\n  }\n\n  if (!schema) {\n    return Promise.reject(schemaNotFoundError(ERROR_INFO));\n  }\n\n  if (!(schema instanceof Schema)) {\n    return Promise.reject(schemaNotInstanceSchemaClassError(ERROR_INFO));\n  }\n\n  return new Promise((resolve, reject) => {\n    let builder;\n\n    // Создание множества записей\n    if (isBulkInsert) {\n      /*\n      if (transaction) {\n        // Если передали внешнюю транзакцию - привяжемся к ней\n        builder = bulkCreate(app, middleware, schema, params, fields, transaction, reject);\n      } else {\n      */\n        // Создаем свою\n        builder = middleware.transaction(trx => bulkCreate(app, middleware, schema, params, fields, trx, reject)\n          .then(trx.commit)\n          .catch(trx.rollback)\n        );\n      /*\n      }\n      */\n    }\n    // Создание одной записи\n    else {\n      builder = middleware(schema.tableName)\n        .insert(setParams(app, schema, params, reject))\n        .returning(...schema.getMyFields(fields));\n      /*\n      if (transaction) {\n        // Если передали внешнюю транзакцию - привяжемся к ней\n        builder = builder.transacting(transaction);\n      }\n      */\n    }\n\n    if (/*transaction ||*/ outer) {\n      // Если передали внешнюю транзакцию или кто-то сам хочет запускать запрос - вернем builder\n      return resolve(builder);\n    }\n\n    // Иначе вызовем его выполнение\n    builder\n      .then(resolve)\n      .catch(internalError(app, ERROR_INFO))\n      .catch(reject);\n  });\n}\n\nfunction bulkCreate(app, middleware, schema, params, fields, trx, reject) {\n  return middleware(schema.tableName)\n    .insert(params.map(params => setParams(app, schema, params, reject)))\n    .returning(...schema.getMyFields(fields))\n    .transacting(trx)\n    .then(function(ids) {\n      const max = ids.reduce((max, id) => max < id ? id : max, 0);\n      return middleware\n        .raw(`ALTER SEQUENCE ${ schema.tableName }_id_seq RESTART WITH ${ max };`)\n        .then(() => ids);\n    });\n}"]}