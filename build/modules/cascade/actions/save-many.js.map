{"version":3,"sources":["../../../../src/modules/cascade/actions/save-many.js"],"names":["cascadeSaveMany","CascadeSaveInternalError","message","join","EOL","type","propertyName","request","originalName","required","original","params","pins","errors","savePin","save","createPin","create","updatePin","update","SaveError","CreateError","UpdateError","resolve","reject","meta","name","result","groupedById","reduce","map","item","id","Array","isArray","length","all","promise","log","info","other","act","criteria","then","push","e","error","removeKeys","in"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAawBA,e;;AAbxB;;;;AACA;;;;AACA;;;;AAEA,MAAMC,2BAA2B,uBAAa;AAC5CC,WAAS,CACP,wDADO,EAEP,wBAFO,EAGPC,IAHO,CAGF,aAAGC,GAHD,CADmC;AAK5CC,QAAc,8CAL8B;AAM5CC,gBAAc;AAN8B,CAAb,CAAjC;;AASe,SAASN,eAAT,CAAyBO,OAAzB,EAAkC;AAAA,8BAS3CA,OAT2C,CAE7CC,YAF6C;AAAA,QAE7CA,YAF6C,yCAE9B,eAF8B;AAAA,8BAS3CD,OAT2C,CAG7CD,YAH6C;AAAA,QAG7CA,YAH6C,yCAG9B,eAH8B;AAAA,0BAS3CC,OAT2C,CAI7CE,QAJ6C;AAAA,QAI7CA,QAJ6C,qCAIlC,KAJkC;AAAA,0BAS3CF,OAT2C,CAK7CG,QAL6C;AAAA,QAK7CA,QAL6C,qCAKlC,EALkC;AAAA,wBAS3CH,OAT2C,CAM7CI,MAN6C;AAAA,QAM7CA,MAN6C,mCAMpC,EANoC;AAAA,sBAS3CJ,OAT2C,CAO7CK,IAP6C;AAAA,QAO7CA,IAP6C,iCAOtC,EAPsC;AAAA,wBAS3CL,OAT2C,CAQ7CM,MAR6C;AAAA,QAQ7CA,MAR6C,mCAQpC,EARoC;AAAA,QAWxCC,OAXwC,GAc3CF,IAd2C,CAW7CG,IAX6C;AAAA,QAYtCC,SAZsC,GAc3CJ,IAd2C,CAY7CK,MAZ6C;AAAA,QAatCC,SAbsC,GAc3CN,IAd2C,CAa7CO,MAb6C;AAAA,QAgBxCC,SAhBwC,GAmB3CP,MAnB2C,CAgB7CE,IAhB6C;AAAA,uBAmB3CF,MAnB2C,CAiB7CI,MAjB6C;AAAA,QAiBtCI,WAjBsC,kCAiBxBD,SAjBwB;AAAA,uBAmB3CP,MAnB2C,CAkB7CM,MAlB6C;AAAA,QAkBtCG,WAlBsC,kCAkBxBF,SAlBwB;;;AAqB/C,SAAO;AAAA,+CAAY,WAAOG,OAAP,EAAgBC,MAAhB,EAA2B;AAC5C,YAAMC,OAAO,EAAElB,SAASA,QAAQA,OAAnB,EAA4BE,QAA5B,EAAsCH,YAAtC,EAAoDE,YAApD,EAAkEG,MAAlE,EAAb;AACA,UAAIe,OAAOlB,eAAe,GAAf,GAAqBF,YAAhC;AACA,UAAIqB,SAAS,EAAb;AACA;AACA,UAAIC,cAAclB,SAASmB,MAAT,CAAgB,UAACC,GAAD,EAAMC,IAAN;AAAA,eAAe,sBAAcD,GAAd,EAAmB,EAAE,CAAEC,KAAKC,EAAP,GAAaD,IAAf,EAAnB,CAAf;AAAA,OAAhB,EAA0E,EAA1E,CAAlB;;AAEA;AACA,UAAIE,MAAMC,OAAN,CAAcvB,MAAd,KAAyB,CAAC,CAACA,OAAOwB,MAAtC,EAA8C;AAC5C,YAAI;AACF,gBAAM,kBAAQC,GAAR,CAAYzB,OAAOmB,GAAP,CAAW,kBAAU;AACrC;AACA,gBAAI,CAAC,CAACnB,OAAOqB,EAAT,IAAerB,OAAOqB,EAAP,IAAaJ,WAAhC,EAA6C;AAC3C,qBAAOA,YAAajB,OAAOqB,EAApB,CAAP;AACD;;AAED,gBAAIK,OAAJ;;AAEA,gBAAInB,aAAa,QAAQP,MAAzB,EAAiC;AAC/BJ,sBAAQ+B,GAAR,CAAYC,IAAZ,CAAkB,yBAAyBb,IAAM,GAAjD,EAAqDD,IAArD;AAD+B,kBAEzBO,EAFyB,GAERrB,MAFQ,CAEzBqB,EAFyB;AAAA,kBAElBQ,KAFkB,0CAER7B,MAFQ;;AAG/B0B,wBAAU9B,QAAQkC,GAAR,4BAAiBvB,SAAjB,IAA4BP,QAAQ6B,KAApC,EAA2CE,UAAU,EAAEV,EAAF,EAArD,IAAV;AACD,aAJD,MAKK,IAAIhB,SAAJ,EAAe;AAClBT,sBAAQ+B,GAAR,CAAYC,IAAZ,CAAkB,uBAAuBb,IAAM,GAA/C,EAAmDD,IAAnD;AACAY,wBAAU9B,QAAQkC,GAAR,4BAAiBzB,SAAjB,IAA4BL,MAA5B,IAAV;AACD,aAHI,MAIA,IAAIG,OAAJ,EAAa;AAChBP,sBAAQ+B,GAAR,CAAYC,IAAZ,CAAkB,yBAAyBb,IAAM,GAAjD,EAAqDD,IAArD;AACAY,wBAAU9B,QAAQkC,GAAR,4BAAiB3B,OAAjB,IAA0BH,MAA1B,IAAV;AACD,aAHI,MAIA;AACHJ,sBAAQ+B,GAAR,CAAa7B,WAAW,MAAX,GAAoB,MAAjC,EACG,kFAAkFiB,IAAM,GAD3F,EAEED,IAFF;;AAKA,qBAAO,kBAAQF,OAAR,EAAP;AACD;;AAED,mBAAOc,QAAQM,IAAR,CAAa;AAAA,qBAAQhB,OAAOiB,IAAP,CAAYb,IAAZ,CAAR;AAAA,aAAb,CAAP;AACD,WA/BiB,CAAZ,CAAN;AAgCD,SAjCD,CAkCA,OAAOc,CAAP,EAAU;AACR,cAAIC,KAAJ;;AAEA,cAAIxB,WAAJ,EAAiB;AAAEwB,oBAAQxB,YAAYuB,CAAZ,EAAepB,IAAf,CAAR;AAA8B,WAAjD,MACK,IAAIJ,WAAJ,EAAiB;AAAEyB,oBAAQzB,YAAYwB,CAAZ,EAAepB,IAAf,CAAR;AAA8B,WAAjD,MACA,IAAIL,SAAJ,EAAe;AAAE0B,oBAAQ1B,UAAUyB,CAAV,EAAapB,IAAb,CAAR;AAA4B,WAA7C,MACA;AAAEqB,oBAAQ7C,yBAAyB4C,CAAzB,EAA4BpB,IAA5B,CAAR;AAA2C;;AAElDlB,kBAAQ+B,GAAR,CAAYQ,KAAZ,CAAkBA,KAAlB,EAAyBrB,IAAzB;;AAEA,cAAIhB,QAAJ,EAAc;AACZ,mBAAOe,OAAOsB,KAAP,CAAP;AACD;AACF;AACF;;AAED,UAAIC,aAAa,oBAAYnB,WAAZ,CAAjB;;AAEA;AACA,UAAKjB,WAAW,IAAX,IAAmBD,SAASyB,MAA7B,IAAwCY,WAAWZ,MAAvD,EAA+D;AAC7D,YAAI;AACF,gBAAM5B,QAAQkC,GAAR;AAEJjC,wBAFI;AAGJF,wBAHI;AAIJG,oBAJI;AAKJiC,sBAAU,EAAEV,IAAI,EAAEgB,IAAIrC,WAAW,IAAX,GAAkBD,SAASoB,GAAT,CAAa;AAAA,sBAAGE,EAAH,SAAGA,EAAH;AAAA,yBAAYA,EAAZ;AAAA,iBAAb,CAAlB,GAAiDe,UAAvD,EAAN,EALN;AAMJnC,gBANI;AAOJC;AAPI,aAAN;AASD,SAVD,CAWA,OAAOgC,CAAP,EAAU;AACR,cAAIpC,QAAJ,EAAc;AACZ,mBAAOe,OAAOqB,CAAP,CAAP;AACD;AACF;AACF;;AAEDtB,cAAQI,MAAR;AACD,KAlFM;;AAAA;AAAA;AAAA;AAAA,OAAP;AAmFD","file":"save-many.js","sourcesContent":["import os from 'os';\nimport WrappedError from 'error/wrapped';\nimport { PIN_CASCADE_REMOVE } from '../../../pins';\n\nconst CascadeSaveInternalError = WrappedError({\n  message: [\n    '{name} - Ошибка каскадного сохранения \"{propertyName}\"',\n    '{name} - {origMessage}',\n  ].join(os.EOL),\n  type        : 'micro.plugins.dal.cascade.save.many.internal',\n  propertyName: null\n});\n\nexport default function cascadeSaveMany(request) {\n  const {\n    originalName = 'not.indicated',\n    propertyName = 'not.indicated',\n    required = false,\n    original = [],\n    params = [],\n    pins = {},\n    errors = {}\n  } = request;\n  const {\n    save:savePin,\n    create:createPin,\n    update:updatePin\n  } = pins;\n  const {\n    save:SaveError,\n    create:CreateError = SaveError,\n    update:UpdateError = SaveError\n  } = errors;\n\n  return new Promise(async (resolve, reject) => {\n    const meta = { request: request.request, required, propertyName, originalName, params };\n    let name = originalName + '.' + propertyName;\n    let result = [];\n    // Сгруппируем по ID\n    let groupedById = original.reduce((map, item) => Object.assign(map, { [ item.id ]: item }), {});\n\n    // Сохраним\n    if (Array.isArray(params) && !!params.length) {\n      try {\n        await Promise.all(params.map(params => {\n          // Если прилша картинка для обновления и она присутвует в оригинальной галереи - удалим ее из группы\n          if (!!params.id && params.id in groupedById) {\n            delete groupedById[ params.id ];\n          }\n\n          let promise;\n\n          if (updatePin && 'id' in params) {\n            request.log.info(`Каскадное обновление \"${ name }\"`, meta);\n            let { id, ...other } = params;\n            promise = request.act({ ...updatePin, params: other, criteria: { id } });\n          }\n          else if (createPin) {\n            request.log.info(`Каскадное создание \"${ name }\"`, meta);\n            promise = request.act({ ...createPin, params });\n          }\n          else if (savePin) {\n            request.log.info(`Каскадное сохранение \"${ name }\"`, meta);\n            promise = request.act({ ...savePin, params });\n          }\n          else {\n            request.log[ required ? 'warn' : 'info' ](\n              `Не передан пин для каскадного (создания && обновления) || сохранения свойства \"${ name }\"`,\n              meta\n            );\n\n            return Promise.resolve();\n          }\n\n          return promise.then(item => result.push(item));\n        }));\n      }\n      catch (e) {\n        let error;\n\n        if (UpdateError) { error = UpdateError(e, meta) }\n        else if (CreateError) { error = CreateError(e, meta) }\n        else if (SaveError) { error = SaveError(e, meta) }\n        else { error = CascadeSaveInternalError(e, meta) }\n\n        request.log.error(error, meta);\n\n        if (required) {\n          return reject(error);\n        }\n      }\n    }\n\n    let removeKeys = Object.keys(groupedById);\n\n    // Если передали null или есть оригинал и его id не соответсвует переданной записи\n    if ((params === null && original.length) || removeKeys.length) {\n      try {\n        await request.act({\n          ...PIN_CASCADE_REMOVE,\n          originalName,\n          propertyName,\n          required,\n          criteria: { id: { in: params === null ? original.map(({ id }) => id) : removeKeys } },\n          pins,\n          errors\n        });\n      }\n      catch (e) {\n        if (required) {\n          return reject(e);\n        }\n      }\n    }\n\n    resolve(result);\n  });\n};"]}