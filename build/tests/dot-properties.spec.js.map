{"version":3,"sources":["../../src/tests/dot-properties.spec.js"],"names":["tableName","should","micro","level","plugins","schema","type","number","description","before","run","then","act","createTable","after","dropTable","end","describe","model","it","result","equal","params","dot","property","property1","property2","customProp","Promise","all","exist","be","a","have","id","findFull","criteria","not","connection","createTableIfNotExists","table","increments","integer","properties","dbName","dropTableIfExists","options","fields"],"mappings":"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","file":"dot-properties.spec.js","sourcesContent":["import chai from 'chai';\nimport Micro, { LEVEL_ERROR } from '@microjs/microjs';\nimport { CONNECT_OPTIONS, CONNECT_OPTIONS_PG } from './constants';\nimport Plugin, {\n  Schema,\n  SchemaTypes,\n  PIN_CONNECTION,\n  PIN_LIST_CREATE,\n  PIN_LIST_UPDATE,\n  PIN_LIST_FIND_ONE,\n  PIN_LIST_FIND_LIST,\n  PIN_LIST_REMOVE\n} from '../index';\n\nconst tableName = 'module_list_dot_db';\nconst should = chai.should();\nconst micro = Micro({\n  level  : LEVEL_ERROR,\n  plugins: [ Plugin(CONNECT_OPTIONS_PG) ]\n});\n\nconst schema = new Schema('UserInfo', {\n  'dot.property1': {\n    type       : SchemaTypes.number,\n    description: 'Свойство записанное через точку'\n  },\n  'dot.property2': {\n    type       : SchemaTypes.number,\n    description: 'Свойство записанное через точку'\n  }\n}, { tableName });\n\nbefore(() => micro\n  .run()\n  .then(() => micro.act(PIN_CONNECTION))\n  .then(createTable)\n);\nafter(() => micro.act(PIN_CONNECTION)\n  .then(dropTable)\n  .then(() => micro.end()));\n\ndescribe('dot-properties', function() {\n  let model;\n\n  it('#ping', () => micro\n    .act('cmd:ping')\n    .then(result => should.equal(result, 'pong'))\n  );\n\n  it('#create return { id }', () => micro\n    .act({ ...PIN_LIST_CREATE, schema, params: {\n      dot       : { property: 1, property1: 1, property2: 2 },\n      customProp: true,\n    } })\n    .then(result => Promise\n      .all([\n        should.exist(result),\n        result.should.be.a('object'),\n        result.should.have.property('id'),\n        result.id.should.be.a('number')\n      ])\n      .then(() => result)\n    )\n    .then(result => findFull(result.id).then(result => model = result))\n  );\n\n  it('#find-one return { id, dot: { property1, property2 } }', () => findFull(model.id)\n    .then(result => Promise.all([\n      should.exist(result),\n      result.should.be.a('object'),\n      result.should.have.property('id').be.a('number').equal(model.id),\n      result.should.have.property('dot')\n        .property('property1').be.a('number').equal(model.dot.property1),\n      result.should.have.property('dot')\n        .property('property2').be.a('number').equal(model.dot.property2)\n    ]))\n  );\n\n  it('#update update property \"dot.property1\"', () => micro\n    .act({\n      ...PIN_LIST_UPDATE,\n      schema,\n      criteria: { id: model.id },\n      params  : { dot: { property1: 2 } },\n    })\n    .then(() => findFull(model.id))\n    .then(result => Promise.all([\n      should.exist(result),\n      result.should.be.a('object'),\n      result.should.have.property('dot')\n        .property('property1').not.equal(model.dot.property1),\n      result.should.have.property('dot')\n        .property('property1').equal(2),\n    ]).then(() => model = result))\n  );\n\n});\n\nfunction createTable(connection) {\n  return connection.schema.createTableIfNotExists(tableName, function (table) {\n    table.increments();\n    table.integer(schema.properties[ 'dot.property1' ].dbName);\n    table.integer(schema.properties[ 'dot.property2' ].dbName);\n  });\n}\n\nfunction dropTable(connection) {\n  return connection.schema.dropTableIfExists(tableName);\n}\n\nfunction findFull(id) {\n  return micro\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: 'full' }\n    });\n}"]}