{"version":3,"sources":["../../src/tests/actions-list.spec.js"],"names":["tableName","should","micro","level","plugins","schema","type","number","description","userId","unique","login","string","max","trim","before","run","then","act","createTable","after","dropTable","end","describe","model","it","result","equal","params","dot","property","property1","property2","customProp","Promise","all","exist","be","a","have","id","findFull","with","length","criteria","in","map","not","connection","createTableIfNotExists","table","increments","integer","properties","dbName","dropTableIfExists","options","fields"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAWA,MAAMA,YAAY,gBAAlB;AACA,MAAMC,SAAS,eAAKA,MAAL,EAAf;AACA,MAAMC,QAAQ,uBAAM;AAClBC,6BADkB;AAElBC,WAAS,CAAE,mDAAF;AAFS,CAAN,CAAd;;AAKA,MAAMC,SAAS,kBAAW,UAAX,EAAuB;AACpC,mBAAiB;AACfC,UAAa,mBAAYC,MADV;AAEfC,iBAAa;AAFE,GADmB;AAKpC,mBAAiB;AACfF,UAAa,mBAAYC,MADV;AAEfC,iBAAa;AAFE,GALmB;AASpCC,UAAQ;AACNH,UAAa,mBAAYC,MADnB;AAENG,YAAa,IAFP;AAGNF,iBAAa;AAHP,GAT4B;AAcpCG,SAAO;AACLL,UAAa,mBAAYM,MADpB;AAELC,SAAa,GAFR;AAGLC,UAAa,IAHR;AAILJ,YAAa,IAJR;AAKLF,iBAAa;AALR;AAd6B,CAAvB,EAqBZ,EAAER,SAAF,EArBY,CAAf;;AAuBAe,OAAO,MAAMb,MACVc,GADU,GAEVC,IAFU,CAEL,MAAMf,MAAMgB,GAAN,uBAFD,EAGVD,IAHU,CAGLE,WAHK,CAAb;AAKAC,MAAM,MAAMlB,MAAMgB,GAAN,wBACTD,IADS,CACJI,SADI,EAETJ,IAFS,CAEJ,MAAMf,MAAMoB,GAAN,EAFF,CAAZ;;AAIAC,SAAS,cAAT,EAAyB,YAAW;AAClC,MAAIC,KAAJ;;AAEAC,KAAG,OAAH,EAAY,MAAMvB,MACfgB,GADe,CACX,UADW,EAEfD,IAFe,CAEVS,UAAUzB,OAAO0B,KAAP,CAAaD,MAAb,EAAqB,MAArB,CAFA,CAAlB;;AAKAD,KAAG,uBAAH,EAA4B,MAAMvB,MAC/BgB,GAD+B,wCACLb,MADK,EACGuB,QAAQ;AACzCnB,cAAY,CAD6B;AAEzCoB,WAAY,EAAEC,UAAU,CAAZ,EAAeC,WAAW,CAA1B,EAA6BC,WAAW,CAAxC,EAF6B;AAGzCC,kBAAY,IAH6B;AAIzCtB,aAAY;AAJ6B,KADX,KAO/BM,IAP+B,CAO1BS,UAAUQ,QACbC,GADa,CACT,CACHlC,OAAOmC,KAAP,CAAaV,MAAb,CADG,EAEHA,OAAOzB,MAAP,CAAcoC,EAAd,CAAiBC,CAAjB,CAAmB,QAAnB,CAFG,EAGHZ,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,IAA5B,CAHG,EAIHJ,OAAOc,EAAP,CAAUvC,MAAV,CAAiBoC,EAAjB,CAAoBC,CAApB,CAAsB,QAAtB,CAJG,CADS,EAObrB,IAPa,CAOR,MAAMS,MAPE,CAPgB,EAgB/BT,IAhB+B,CAgB1BS,UAAUe,SAASf,OAAOc,EAAhB,EAAoBvB,IAApB,CAAyBS,UAAUF,QAAQE,MAA3C,CAhBgB,CAAlC;;AAmBAD,KAAG,iCAAH,EAAsC,MAAMvB,MACzCgB,GADyC,wCACfb,MADe,EACPuB,QAAQ,CACzC,EAAEnB,QAAQ,GAAV,EAAeE,OAAO,SAAtB,EADyC,EAEzC,EAAEF,QAAQ,IAAV,EAAgBE,OAAO,UAAvB,EAFyC,CADD,KAKzCM,IALyC,CAKpCS,UAAUQ,QACbC,GADa,CACT,CACHlC,OAAOmC,KAAP,CAAaV,MAAb,CADG,EAEHA,OAAOzB,MAAP,CAAcoC,EAAd,CAAiBC,CAAjB,CAAmB,OAAnB,EAA4BI,IAA5B,CAAiCC,MAAjC,CAAwC,CAAxC,CAFG,CADS,EAKb1B,IALa,CAKR,MAAMS,MALE,EAMbT,IANa,CAMRS,UAAUxB,MAAMgB,GAAN,wCACMb,MADN;AAEduC,cAAU;AACRJ,UAAI,EAAEK,IAAInB,OAAOoB,GAAP,CAAWtB,SAASA,MAAMgB,EAA1B,CAAN;AADI;AAFI,KANF,CAL0B,CAA5C;;AAoBAf,KAAG,uEAAH,EAA4E,MAAMgB,SAASjB,MAAMgB,EAAf,EAC/EvB,IAD+E,CAC1ES,UAAUQ,QAAQC,GAAR,CAAY,CAC1BlC,OAAOmC,KAAP,CAAaV,MAAb,CAD0B,EAE1BA,OAAOzB,MAAP,CAAcoC,EAAd,CAAiBC,CAAjB,CAAmB,QAAnB,CAF0B,EAG1BZ,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,IAA5B,EAAkCO,EAAlC,CAAqCC,CAArC,CAAuC,QAAvC,EAAiDX,KAAjD,CAAuDH,MAAMgB,EAA7D,CAH0B,EAI1Bd,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,KAA5B,EACGA,QADH,CACY,WADZ,EACyBO,EADzB,CAC4BC,CAD5B,CAC8B,QAD9B,EACwCX,KADxC,CAC8CH,MAAMK,GAAN,CAAUE,SADxD,CAJ0B,EAM1BL,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,KAA5B,EACGA,QADH,CACY,WADZ,EACyBO,EADzB,CAC4BC,CAD5B,CAC8B,QAD9B,EACwCX,KADxC,CAC8CH,MAAMK,GAAN,CAAUG,SADxD,CAN0B,EAQ1BN,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,QAA5B,EAAsCO,EAAtC,CAAyCC,CAAzC,CAA2C,QAA3C,EAAqDX,KAArD,CAA2DH,MAAMf,MAAjE,CAR0B,EAS1BiB,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,OAA5B,EAAqCO,EAArC,CAAwCC,CAAxC,CAA0C,QAA1C,EAAoDX,KAApD,CAA0DH,MAAMb,KAAhE,CAT0B,CAAZ,CADgE,CAAlF;;AAcAc,KAAG,yBAAH,EAA8B,MAAMvB,MACjCgB,GADiC,0CACLb,MADK,EACGuC,UAAU,EAAEJ,IAAIhB,MAAMgB,EAAZ,EADb,KAEjCvB,IAFiC,CAE5BS,UAAUQ,QAAQC,GAAR,CAAY,CAC1BlC,OAAOmC,KAAP,CAAaV,MAAb,CAD0B,EAE1BA,OAAOzB,MAAP,CAAcoC,EAAd,CAAiBC,CAAjB,CAAmB,QAAnB,CAF0B,EAG1BZ,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,IAA5B,EAAkCO,EAAlC,CAAqCC,CAArC,CAAuC,QAAvC,EAAiDX,KAAjD,CAAuDH,MAAMgB,EAA7D,CAH0B,EAI1Bd,OAAOzB,MAAP,CAAc8C,GAAd,CAAkBR,IAAlB,CAAuBT,QAAvB,CAAgC,QAAhC,CAJ0B,EAK1BJ,OAAOzB,MAAP,CAAc8C,GAAd,CAAkBR,IAAlB,CAAuBT,QAAvB,CAAgC,OAAhC,CAL0B,CAAZ,CAFkB,CAApC;;AAWAL,KAAG,4BAAH,EAAiC,MAAMvB,MACpCgB,GADoC,2CACPb,MADO,KAEpCY,IAFoC,CAE/BS,UAAUQ,QAAQC,GAAR,CAAY,CAC1BlC,OAAOmC,KAAP,CAAaV,MAAb,CAD0B,EAE1BA,OAAOzB,MAAP,CAAcoC,EAAd,CAAiBC,CAAjB,CAAmB,OAAnB,EAA4BI,IAA5B,CAAiCC,MAAjC,CAAwC,CAAxC,CAF0B,EAG1BjB,OAAQ,CAAR,EAAYzB,MAAZ,CAAmBoC,EAAnB,CAAsBC,CAAtB,CAAwB,QAAxB,CAH0B,EAI1BZ,OAAQ,CAAR,EAAYzB,MAAZ,CAAmBsC,IAAnB,CAAwBT,QAAxB,CAAiC,IAAjC,EAAuCO,EAAvC,CAA0CC,CAA1C,CAA4C,QAA5C,EAAsDX,KAAtD,CAA4DH,MAAMgB,EAAlE,CAJ0B,EAK1Bd,OAAQ,CAAR,EAAYzB,MAAZ,CAAmB8C,GAAnB,CAAuBR,IAAvB,CAA4BT,QAA5B,CAAqC,QAArC,CAL0B,EAM1BJ,OAAQ,CAAR,EAAYzB,MAAZ,CAAmB8C,GAAnB,CAAuBR,IAAvB,CAA4BT,QAA5B,CAAqC,OAArC,CAN0B,CAAZ,CAFqB,CAAvC;;AAYAL,KAAG,+BAAH,EAAoC,MAAMvB,MACvCgB,GADuC;AAGtCb,UAHsC;AAItCuC,cAAU,EAAEJ,IAAIhB,MAAMgB,EAAZ,EAJ4B;AAKtCZ,YAAU,EAAEjB,OAAO,QAAT;AAL4B,MAOvCM,IAPuC,CAOlC,MAAMwB,SAASjB,MAAMgB,EAAf,CAP4B,EAQvCvB,IARuC,CAQlCS,UAAUQ,QAAQC,GAAR,CAAY,CAC1BlC,OAAOmC,KAAP,CAAaV,MAAb,CAD0B,EAE1BA,OAAOzB,MAAP,CAAcoC,EAAd,CAAiBC,CAAjB,CAAmB,QAAnB,CAF0B,EAG1BZ,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,IAA5B,EAAkCH,KAAlC,CAAwCH,MAAMgB,EAA9C,CAH0B,EAI1Bd,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,OAA5B,EAAqCiB,GAArC,CAAyCpB,KAAzC,CAA+CH,MAAMb,KAArD,CAJ0B,EAK1Be,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,OAA5B,EAAqCH,KAArC,CAA2C,QAA3C,CAL0B,EAM1BD,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,QAA5B,EAAsCH,KAAtC,CAA4CH,MAAMf,MAAlD,CAN0B,CAAZ,EAObQ,IAPa,CAOR,MAAMO,QAAQE,MAPN,CARwB,CAA1C;;AAkBAD,KAAG,uCAAH,EAA4C,MAAMvB,MAC/CgB,GAD+C;AAG9Cb,UAH8C;AAI9CuC,cAAU,EAAEJ,IAAIhB,MAAMgB,EAAZ,EAJoC;AAK9CZ,YAAU,EAAEjB,OAAO,QAAT,EAAmBF,QAAQ,CAA3B;AALoC,MAO/CQ,IAP+C,CAO1C,MAAMwB,SAASjB,MAAMgB,EAAf,CAPoC,EAQ/CvB,IAR+C,CAQ1CS,UAAUQ,QAAQC,GAAR,CAAY,CAC1BlC,OAAOmC,KAAP,CAAaV,MAAb,CAD0B,EAE1BA,OAAOzB,MAAP,CAAcoC,EAAd,CAAiBC,CAAjB,CAAmB,QAAnB,CAF0B,EAG1BZ,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,IAA5B,EAAkCH,KAAlC,CAAwCH,MAAMgB,EAA9C,CAH0B,EAI1Bd,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,OAA5B,EAAqCiB,GAArC,CAAyCpB,KAAzC,CAA+CH,MAAMb,KAArD,CAJ0B,EAK1Be,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,OAA5B,EAAqCH,KAArC,CAA2C,QAA3C,CAL0B,EAM1BD,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,QAA5B,EAAsCiB,GAAtC,CAA0CpB,KAA1C,CAAgDH,MAAMf,MAAtD,CAN0B,EAO1BiB,OAAOzB,MAAP,CAAcsC,IAAd,CAAmBT,QAAnB,CAA4B,QAA5B,EAAsCH,KAAtC,CAA4C,CAA5C,CAP0B,CAAZ,EAQbV,IARa,CAQR,MAAMO,QAAQE,MARN,CARgC,CAAlD;;AAmBAD,KAAG,uBAAH,EAA4B,MAAMvB,MAC/BgB,GAD+B,wCACLb,MADK,EACGuC,UAAU,EAAEJ,IAAIhB,MAAMgB,EAAZ,EADb,KAE/BvB,IAF+B,CAE1BS,UAAUQ,QAAQC,GAAR,CAAY,CAC1BlC,OAAOmC,KAAP,CAAaV,OAAQ,CAAR,CAAb,CAD0B,EAE1BA,OAAQ,CAAR,EAAYzB,MAAZ,CAAmBoC,EAAnB,CAAsBC,CAAtB,CAAwB,QAAxB,CAF0B,EAG1BZ,OAAQ,CAAR,EAAYzB,MAAZ,CAAmBsC,IAAnB,CAAwBT,QAAxB,CAAiC,IAAjC,EAAuCO,EAAvC,CAA0CC,CAA1C,CAA4C,QAA5C,EAAsDX,KAAtD,CAA4DH,MAAMgB,EAAlE,CAH0B,CAAZ,CAFgB,CAAlC;;AASAf,KAAG,8BAAH,EAAmC,MAAMvB,MACtCgB,GADsC,0CACVb,MADU,EACFuC,UAAU,EAAEJ,IAAIhB,MAAMgB,EAAZ,EADR,KAEtCvB,IAFsC,CAEjCS,UAAUzB,OAAO8C,GAAP,CAAWX,KAAX,CAAiBV,MAAjB,CAFuB,CAAzC;AAKD,CAvID;;AAyIA,SAASP,WAAT,CAAqB6B,UAArB,EAAiC;AAC/B,SAAOA,WAAW3C,MAAX,CAAkB4C,sBAAlB,CAAyCjD,SAAzC,EAAoD,UAAUkD,KAAV,EAAiB;AAC1EA,UAAMC,UAAN;AACAD,UAAME,OAAN,CAAc/C,OAAOgD,UAAP,CAAmB,eAAnB,EAAqCC,MAAnD;AACAJ,UAAME,OAAN,CAAc/C,OAAOgD,UAAP,CAAmB,eAAnB,EAAqCC,MAAnD;AACAJ,UAAME,OAAN,CAAc/C,OAAOgD,UAAP,CAAmB,QAAnB,EAA8BC,MAA5C;AACAJ,UAAMtC,MAAN,CAAaP,OAAOgD,UAAP,CAAmB,OAAnB,EAA6BC,MAA1C;AACAJ,UAAMxC,MAAN,CAAa,CACXL,OAAOgD,UAAP,CAAmB,QAAnB,EAA8BC,MADnB,EAEXjD,OAAOgD,UAAP,CAAmB,OAAnB,EAA6BC,MAFlB,CAAb;AAID,GAVM,CAAP;AAWD;;AAED,SAASjC,SAAT,CAAmB2B,UAAnB,EAA+B;AAC7B,SAAOA,WAAW3C,MAAX,CAAkBkD,iBAAlB,CAAoCvD,SAApC,CAAP;AACD;;AAED,SAASyC,QAAT,CAAkBD,EAAlB,EAAsB;AACpB,SAAOtC,MACJgB,GADI;AAGHb,UAHG;AAIHuC,cAAU,EAAEJ,EAAF,EAJP;AAKHgB,aAAU,EAAEC,QAAQ,MAAV;AALP,KAAP;AAOD","file":"actions-list.spec.js","sourcesContent":["import chai from 'chai';\nimport Micro, { LEVEL_ERROR } from '@microjs/microjs';\nimport { CONNECT_OPTIONS, CONNECT_OPTIONS_PG } from './constants';\nimport Plugin, {\n  Schema,\n  SchemaTypes,\n  PIN_CONNECTION,\n  PIN_LIST_CREATE,\n  PIN_LIST_UPDATE,\n  PIN_LIST_FIND_ONE,\n  PIN_LIST_FIND_LIST,\n  PIN_LIST_REMOVE\n} from '../index';\n\nconst tableName = 'module_list_db';\nconst should = chai.should();\nconst micro = Micro({\n  level  : LEVEL_ERROR,\n  plugins: [ Plugin(CONNECT_OPTIONS_PG) ]\n});\n\nconst schema = new Schema('UserInfo', {\n  'dot.property1': {\n    type       : SchemaTypes.number,\n    description: 'Свойство записанное через точку'\n  },\n  'dot.property2': {\n    type       : SchemaTypes.number,\n    description: 'Свойство записанное через точку'\n  },\n  userId: {\n    type       : SchemaTypes.number,\n    unique     : true,\n    description: 'Идентификатор пользователя'\n  },\n  login: {\n    type       : SchemaTypes.string,\n    max        : 128,\n    trim       : true,\n    unique     : true,\n    description: 'Уникальный логин (email) для входа'\n  },\n}, { tableName });\n\nbefore(() => micro\n  .run()\n  .then(() => micro.act(PIN_CONNECTION))\n  .then(createTable)\n);\nafter(() => micro.act(PIN_CONNECTION)\n  .then(dropTable)\n  .then(() => micro.end()));\n\ndescribe('actions-list', function() {\n  let model;\n\n  it('#ping', () => micro\n    .act('cmd:ping')\n    .then(result => should.equal(result, 'pong'))\n  );\n\n  it('#create return { id }', () => micro\n    .act({ ...PIN_LIST_CREATE, schema, params: {\n      userId    : 1,\n      dot       : { property: 1, property1: 1, property2: 2 },\n      customProp: true,\n      login     : 'test'\n    } })\n    .then(result => Promise\n      .all([\n        should.exist(result),\n        result.should.be.a('object'),\n        result.should.have.property('id'),\n        result.id.should.be.a('number')\n      ])\n      .then(() => result)\n    )\n    .then(result => findFull(result.id).then(result => model = result))\n  );\n\n  it('#create return [{ id }, { id }]', () => micro\n    .act({ ...PIN_LIST_CREATE, schema, params: [\n      { userId: 111, login: 'test111' },\n      { userId: 2222, login: 'test2222' }\n    ] })\n    .then(result => Promise\n      .all([\n        should.exist(result),\n        result.should.be.a('array').with.length(2)\n      ])\n      .then(() => result)\n      .then(result => micro.act({\n        ...PIN_LIST_REMOVE, schema,\n        criteria: {\n          id: { in: result.map(model => model.id) }\n        }\n      }))\n    )\n  );\n\n  it('#find-one return { id, dot: { property1, property2 }, userId, login }', () => findFull(model.id)\n    .then(result => Promise.all([\n      should.exist(result),\n      result.should.be.a('object'),\n      result.should.have.property('id').be.a('number').equal(model.id),\n      result.should.have.property('dot')\n        .property('property1').be.a('number').equal(model.dot.property1),\n      result.should.have.property('dot')\n        .property('property2').be.a('number').equal(model.dot.property2),\n      result.should.have.property('userId').be.a('number').equal(model.userId),\n      result.should.have.property('login').be.a('string').equal(model.login)\n    ]))\n  );\n\n  it('#find-one return { id }', () => micro\n    .act({ ...PIN_LIST_FIND_ONE, schema, criteria: { id: model.id } })\n    .then(result => Promise.all([\n      should.exist(result),\n      result.should.be.a('object'),\n      result.should.have.property('id').be.a('number').equal(model.id),\n      result.should.not.have.property('userId'),\n      result.should.not.have.property('login'),\n    ]))\n  );\n\n  it('#find-list return [{ id }]', () => micro\n    .act({ ...PIN_LIST_FIND_LIST, schema })\n    .then(result => Promise.all([\n      should.exist(result),\n      result.should.be.a('array').with.length(1),\n      result[ 0 ].should.be.a('object'),\n      result[ 0 ].should.have.property('id').be.a('number').equal(model.id),\n      result[ 0 ].should.not.have.property('userId'),\n      result[ 0 ].should.not.have.property('login'),\n    ]))\n  );\n\n  it('#update update property login', () => micro\n    .act({\n      ...PIN_LIST_UPDATE,\n      schema,\n      criteria: { id: model.id },\n      params  : { login: 'login2' },\n    })\n    .then(() => findFull(model.id))\n    .then(result => Promise.all([\n      should.exist(result),\n      result.should.be.a('object'),\n      result.should.have.property('id').equal(model.id),\n      result.should.have.property('login').not.equal(model.login),\n      result.should.have.property('login').equal('login2'),\n      result.should.have.property('userId').equal(model.userId),\n    ]).then(() => model = result))\n  );\n\n  it('#update update property login, userId', () => micro\n    .act({\n      ...PIN_LIST_UPDATE,\n      schema,\n      criteria: { id: model.id },\n      params  : { login: 'login3', userId: 2 },\n    })\n    .then(() => findFull(model.id))\n    .then(result => Promise.all([\n      should.exist(result),\n      result.should.be.a('object'),\n      result.should.have.property('id').equal(model.id),\n      result.should.have.property('login').not.equal(model.login),\n      result.should.have.property('login').equal('login3'),\n      result.should.have.property('userId').not.equal(model.userId),\n      result.should.have.property('userId').equal(2),\n    ]).then(() => model = result))\n  );\n\n  it('#remove return { id }', () => micro\n    .act({ ...PIN_LIST_REMOVE, schema, criteria: { id: model.id } })\n    .then(result => Promise.all([\n      should.exist(result[ 0 ]),\n      result[ 0 ].should.be.a('object'),\n      result[ 0 ].should.have.property('id').be.a('number').equal(model.id)\n    ]))\n  );\n\n  it('#find-one should return null', () => micro\n    .act({ ...PIN_LIST_FIND_ONE, schema, criteria: { id: model.id } })\n    .then(result => should.not.exist(result))\n  );\n\n});\n\nfunction createTable(connection) {\n  return connection.schema.createTableIfNotExists(tableName, function (table) {\n    table.increments();\n    table.integer(schema.properties[ 'dot.property1' ].dbName);\n    table.integer(schema.properties[ 'dot.property2' ].dbName);\n    table.integer(schema.properties[ 'userId' ].dbName);\n    table.string(schema.properties[ 'login' ].dbName);\n    table.unique([\n      schema.properties[ 'userId' ].dbName,\n      schema.properties[ 'login' ].dbName\n    ]);\n  });\n}\n\nfunction dropTable(connection) {\n  return connection.schema.dropTableIfExists(tableName);\n}\n\nfunction findFull(id) {\n  return micro\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: 'full' }\n    });\n}"]}