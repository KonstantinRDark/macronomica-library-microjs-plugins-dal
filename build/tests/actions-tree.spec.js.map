{"version":3,"sources":["../../src/tests/actions-tree.spec.js"],"names":["should","micro","level","plugins","tableName","schema","parentId","type","number","null","leaf","boolean","default","name","string","max","trim","before","run","then","act","createTable","after","end","describe","it","result","equal","root","child","createNode","Promise","all","exist","be","a","have","property","id","findOne","removeNode","roots","updateNode","root1","root2","not","child1","child2","findPath","rootPath","child1Path","child2Path","with","length","findByParentId","list1","list2","list3","list4","connection","createTableIfNotExists","table","increments","integer","nullable","defaultTo","properties","dropTable","dropTableIfExists","criteria","params","fields","options","findFull"],"mappings":"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","file":"actions-tree.spec.js","sourcesContent":["import chai from 'chai';\nimport Micro, { LEVEL_ERROR } from '@microjs/microjs';\nimport { CONNECT_OPTIONS } from './constants';\nimport Plugin, {\n  Schema,\n  SchemaTypes,\n  PIN_CONNECTION,\n  PIN_LIST_FIND_ONE,\n  PIN_TREE_FIND_PARENT_id,\n  PIN_TREE_CREATE,\n  PIN_TREE_UPDATE,\n  PIN_TREE_FIND_PATH,\n  PIN_TREE_REMOVE\n} from '../index';\n\nconst should = chai.should();\nconst micro = Micro({\n  level  : LEVEL_ERROR,\n  plugins: [ Plugin(CONNECT_OPTIONS) ]\n});\nconst tableName = 'module-tree-db';\n\nconst schema = new Schema('TreeNode', {\n  parentId: {\n    type: SchemaTypes.number,\n    null: true\n  },\n  leaf: {\n    type   : SchemaTypes.boolean,\n    default: true\n  },\n  name: {\n    type: SchemaTypes.string,\n    max : 128,\n    trim: true\n  },\n}, { tableName });\n\nbefore(() => micro\n  .run()\n  .then(() => micro.act(PIN_CONNECTION))\n  .then(createTable)\n);\nafter(() => micro.act(PIN_CONNECTION)\n  // .then(dropTable)\n  .then(() => micro.end()));\n\ndescribe('actions-tree', function() {\n\n  it('ping', () => micro\n    .act('cmd:ping')\n    .then(result => should.equal(result, 'pong'))\n  );\n\n  it('create', () => {\n    let root;\n    let child;\n\n    return createNode({ name: 'node-root' })\n      .then(result => Promise.all([\n        root = result,\n        should.exist(result),\n        result.should.be.a('object'),\n        result.should.have.property('id'),\n        result.id.should.be.a('number')\n      ]))\n      .then(() => findOne(root.id))\n      .then(result => Promise.all([\n        should.exist(result),\n        result.should.have.property('leaf').be.a('boolean').equal(true)\n      ]))\n\n      .then(() => createNode({ parentId: root.id, name: 'node-child-1' }))\n      .then(result => Promise.all([\n        child = result,\n        should.exist(result),\n        result.should.be.a('object'),\n        result.should.have.property('id'),\n        result.id.should.be.a('number')\n      ]).then(() => result))\n\n      .then(result => Promise.all([ findOne(root.id), findOne(result.id) ]))\n      .then(([ root, child ]) => Promise\n        .all([\n          should.exist(root),\n          should.exist(child),\n          root.should.have.property('leaf').be.a('boolean').equal(false),\n          child.should.have.property('leaf').be.a('boolean').equal(true)\n      ]))\n      .then(() => Promise.all([ removeNode(root.id), removeNode(child.id) ]));\n  });\n\n  it('update', () => {\n    let roots;\n    let child;\n\n    return Promise\n      .all([\n        createNode({ name: 'node-root-1' }),\n        createNode({ name: 'node-root-2' }),\n      ])\n      .then(result => roots = result)\n      .then(roots => createNode({ parentId: roots[ 0 ].id, name: 'node-child-1' })\n        .then(child => updateNode(child.id, { parentId: roots[ 1 ].id })\n          .then(() => Promise\n            .all([\n              findOne(roots[ 0 ].id),\n              findOne(roots[ 1 ].id),\n              findOne(child.id)\n            ])\n            .then(([ root1, root2, child ]) => Promise.all([\n              should.exist(root1),\n              should.exist(root2),\n              should.exist(child),\n              root1.should.have.property('leaf').equal(true),\n              root2.should.have.property('leaf').equal(false),\n              child.should.have.property('leaf').equal(true),\n              child.should.have.property('parentId').not.equal(root1.id),\n              child.should.have.property('parentId').equal(root2.id),\n            ]))\n          )\n          .then(result => Promise.all([\n            removeNode(roots[ 0 ].id),\n            removeNode(roots[ 1 ].id),\n            removeNode(child.id)\n          ]))\n        )\n      );\n  });\n\n  it('find path', () => createNode({ name: 'node-root-1' })\n    .then(root => createNode({ parentId: root.id, name: 'node-child-1' })\n      .then(child1 => createNode({ parentId: child1.id, name: 'node-child-2' })\n        .then(child2 => Promise\n          .all([\n            findPath(),\n            findPath(child1.id),\n            findPath(child2.id),\n          ])\n          .then(([ rootPath, child1Path, child2Path ]) => Promise\n            .all([\n              rootPath.should.with.length(0),\n              child1Path.should.with.length(1),\n              child2Path.should.with.length(2)\n            ])\n            .then(() => Promise.all([\n              removeNode(root.id),\n              removeNode(child1.id),\n              removeNode(child2.id)\n            ]))\n          )\n        )\n      )\n    )\n  );\n\n  it('find parents', () => createNode({ name: 'node-root-1' })\n    .then(root => createNode({ parentId: root.id, name: 'node-child-1' })\n      .then(child1 => createNode({ parentId: root.id, name: 'node-child-1' })\n        .then(child2 => Promise\n          .all([\n            findByParentId(),\n            findByParentId(root.id),\n            findByParentId(child1.id),\n            findByParentId(child2.id),\n          ])\n          .then(([ list1, list2, list3, list4 ]) => Promise\n            .all([\n              list1.should.with.length(1),\n              list2.should.with.length(2),\n              list3.should.with.length(0),\n              list4.should.with.length(0)\n            ])\n            .then(() => Promise.all([\n              removeNode(root.id),\n              removeNode(child1.id),\n              removeNode(child2.id)\n            ]))\n          )\n        )\n      )\n    )\n  );\n\n  it('remove', () => createNode({ name: 'node-root-1' })\n    .then(root => removeNode(root.id))\n  );\n});\n\nfunction createTable(connection) {\n  return connection.schema.createTableIfNotExists(tableName, function (table) {\n    table.increments();\n    table.integer('parentId').nullable();\n    table.boolean('leaf').defaultTo(schema.properties.leaf.default);\n    table.string('name');\n  });\n}\n\nfunction dropTable(connection) {\n  return connection.schema.dropTableIfExists(tableName);\n}\n\nfunction removeNode(id) {\n  return micro\n    .act({\n      ...PIN_TREE_REMOVE,\n      schema,\n      criteria: { id }\n    });\n}\n\nfunction updateNode(id, params) {\n  return micro\n    .act({\n      ...PIN_TREE_UPDATE,\n      schema,\n      criteria: { id },\n      params\n    });\n}\n\nfunction createNode(params = {}) {\n  return micro\n    .act({\n      ...PIN_TREE_CREATE,\n      schema,\n      params\n    });\n}\n\nfunction findPath(id) {\n  return micro\n    .act({\n      ...PIN_TREE_FIND_PATH,\n      schema,\n      criteria: { id }\n    });\n}\n\nfunction findByParentId(parentId) {\n  return micro\n    .act({\n      ...PIN_TREE_FIND_PARENT_id,\n      schema,\n      criteria: { parentId }\n    });\n}\n\nfunction findOne(id, fields = [ 'id', 'parentId', 'leaf', 'name' ]) {\n  return micro\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields }\n    });\n}\n\nfunction findFull(id) {\n  return micro\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: [ 'id', 'parentId', 'leaf', 'name' ] }\n    });\n}"]}