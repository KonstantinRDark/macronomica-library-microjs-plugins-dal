{"version":3,"sources":["../../src/tests/actions-tree.spec.js"],"names":["should","micro","level","plugins","tableName","schema","userId","type","number","unique","description","login","string","max","trim","before","run","then","act","createTable","after","end","describe","model","it","result","equal","connection","createTableIfNotExists","table","increments","integer","findFull","id","criteria","options","fields"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAYA,MAAMA,SAAS,eAAKA,MAAL,EAAf;AACA,MAAMC,QAAQ,uBAAM;AAClBC,6BADkB;AAElBC,WAAS,CAAE,gDAAF;AAFS,CAAN,CAAd;AAIA,MAAMC,YAAY,gBAAlB;;AAEA,MAAMC,SAAS,kBAAW,UAAX,EAAuB;AACpCC,UAAQ;AACNC,UAAa,mBAAYC,MADnB;AAENC,YAAa,IAFP;AAGNC,iBAAa;AAHP,GAD4B;AAMpCC,SAAO;AACLJ,UAAa,mBAAYK,MADpB;AAELC,SAAa,GAFR;AAGLC,UAAa,IAHR;AAILL,YAAa,IAJR;AAKLC,iBAAa;AALR;AAN6B,CAAvB,EAaZ,EAAEN,SAAF,EAbY,CAAf;;AAeAW,OAAO,MAAMd,MACVe,GADU,GAEVC,IAFU,CAEL,MAAMhB,MAAMiB,GAAN,uBAFD,EAGVD,IAHU,CAGLE,WAHK,CAAb;AAKAC,MAAM,MAAMnB,MAAMoB,GAAN,EAAZ;;AAEAC,SAAS,cAAT,EAAyB,YAAW;AAClC,MAAIC,KAAJ;;AAEAC,KAAG,OAAH,EAAY,MAAMvB,MACfiB,GADe,CACX,UADW,EAEfD,IAFe,CAEVQ,UAAUzB,OAAO0B,KAAP,CAAaD,MAAb,EAAqB,MAArB,CAFA,CAAlB;AAKD,CARD;;AAUA,SAASN,WAAT,CAAqBQ,UAArB,EAAiC;AAC/B,SAAOA,WAAWtB,MAAX,CAAkBuB,sBAAlB,CAAyCxB,SAAzC,EAAoD,UAAUyB,KAAV,EAAiB;AAC1EA,UAAMC,UAAN;AACAD,UAAME,OAAN,CAAc,QAAd;AACAF,UAAMjB,MAAN,CAAa,OAAb;AACAiB,UAAMpB,MAAN,CAAa,CAAE,QAAF,EAAY,OAAZ,CAAb;AACD,GALM,CAAP;AAMD;;AAED,SAASuB,QAAT,CAAkBC,EAAlB,EAAsB;AACpB,SAAOhC,MACJiB,GADI;AAGHb,UAHG;AAIH6B,cAAU,EAAED,EAAF,EAJP;AAKHE,aAAU,EAAEC,QAAQ,CAAE,IAAF,EAAQ,QAAR,EAAkB,OAAlB,CAAV;AALP,KAAP;AAOD","file":"actions-tree.spec.js","sourcesContent":["import chai from 'chai';\nimport Micro, { LEVEL_ERROR } from '@microjs/microjs';\nimport { CONNECT_OPTIONS } from './constants';\nimport Plugin, {\n  Schema,\n  SchemaTypes,\n  PIN_CONNECTION,\n  PIN_LIST_FIND_ONE,\n  PIN_LIST_FIND_LIST,\n  PIN_TREE_CREATE,\n  PIN_TREE_UPDATE,\n  PIN_TREE_FIND_PATH,\n  PIN_TREE_REMOVE\n} from '../index';\n\nconst should = chai.should();\nconst micro = Micro({\n  level  : LEVEL_ERROR,\n  plugins: [ Plugin(CONNECT_OPTIONS) ]\n});\nconst tableName = 'module-list-db';\n\nconst schema = new Schema('UserInfo', {\n  userId: {\n    type       : SchemaTypes.number,\n    unique     : true,\n    description: 'Идентификатор пользователя'\n  },\n  login: {\n    type       : SchemaTypes.string,\n    max        : 128,\n    trim       : true,\n    unique     : true,\n    description: 'Уникальный логин (email) для входа'\n  },\n}, { tableName });\n\nbefore(() => micro\n  .run()\n  .then(() => micro.act(PIN_CONNECTION))\n  .then(createTable)\n);\nafter(() => micro.end());\n\ndescribe('actions-tree', function() {\n  let model;\n\n  it('#ping', () => micro\n    .act('cmd:ping')\n    .then(result => should.equal(result, 'pong'))\n  );\n\n});\n\nfunction createTable(connection) {\n  return connection.schema.createTableIfNotExists(tableName, function (table) {\n    table.increments();\n    table.integer('userId');\n    table.string('login');\n    table.unique([ 'userId', 'login' ]);\n  });\n}\n\nfunction findFull(id) {\n  return micro\n    .act({\n      ...PIN_LIST_FIND_ONE,\n      schema,\n      criteria: { id },\n      options : { fields: [ 'id', 'userId', 'login' ] }\n    });\n}"]}