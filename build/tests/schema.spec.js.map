{"version":3,"sources":["../../src/tests/schema.spec.js"],"names":["modelName","tableName","should","describe","it","schema","userId","type","number","login","string","be","instanceof","equal","mask","full","fieldsMask","console","log","__masks","Promise","all","getMyFields","eql","with","length"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,MAAMA,YAAY,MAAlB;AACA,MAAMC,YAAY,QAAlB;AACA,MAAMC,SAAS,eAAKA,MAAL,EAAf;;AAEAC,SAAS,QAAT,EAAmB,YAAW;;AAE5BC,KAAG,iBAAH,EAAsB,MAAM;AAC1B,UAAMC,SAAS,kBAAWL,SAAX,EAAsB;AACnCM,cAAQ;AACNC,cAAM,mBAAYC;AADZ,OAD2B;AAInCC,aAAO;AACLF,cAAM,mBAAYG;AADb;AAJ4B,KAAtB,EAOZ,EAAET,SAAF,EAPY,CAAf;AAQAI,WAAOH,MAAP,CAAcS,EAAd,CAAiBC,UAAjB,gBAAoCC,KAApC,CAA0CR,MAA1C;AACD,GAVD;;AAYAD,KAAG,6CAAH,EAAkD,MAAM;AACtD,UAAMU,OAAO,CAAE,MAAF,EAAU,MAAV,CAAb;AACA,UAAMC,OAAO,CAAE,OAAF,EAAW,OAAX,EAAoB,OAApB,CAAb;;AAEA,UAAMV,SAAS,kBAAWL,SAAX,EAAsB;AACnC,OAAE,OAAF,GAAa;AACXO,cAAY,mBAAYC,MADb;AAEXQ,oBAAY,KAFD,CAEgB;AAFhB,OADsB;AAKnC,OAAE,OAAF,GAAa;AACXT,cAAY,mBAAYC,MADb;AAEXQ,oBAAY,YAFD,CAEuB;AAFvB,OALsB;AASnC,eAAS;AACPT,cAAY,mBAAYG,MADjB;AAEPM,oBAAY,CAAE,OAAF,CAFL,EAT0B;AAanC,eAAS;AACPT,cAAY,mBAAYG,MADjB;AAEPM,oBAAY,EAAED,MAAM,KAAR,EAFL;AAb0B,KAAtB,EAiBZ,EAAEd,SAAF,EAAae,YAAYF,IAAzB,EAjBY,CAAf;AAkBAG,YAAQC,GAAR,CAAYb,OAAOc,OAAnB;;AAEA,WAAOC,QAAQC,GAAR,CAAY,CACjBhB,OAAOiB,WAAP,GAAqBpB,MAArB,CAA4BqB,GAA5B,CAAgC,CAAE,IAAF,CAAhC,EAA0CC,IAA1C,CAA+CC,MAA/C,CAAsD,CAAtD,CADiB,EAEjBpB,OAAOiB,WAAP,CAAmB,CAAE,IAAF,EAAQ,OAAR,CAAnB,EAAsCpB,MAAtC,CAA6CqB,GAA7C,CAAiD,CAAE,IAAF,EAAQ,OAAR,CAAjD,EAAoEC,IAApE,CAAyEC,MAAzE,CAAgF,CAAhF,CAFiB,EAGjBpB,OAAOiB,WAAP,CAAmB,MAAnB,EAA2BpB,MAA3B,CAAkCqB,GAAlC,CAAsC,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CAAtC,EAAkEC,IAAlE,CAAuEC,MAAvE,CAA8E,CAA9E,CAHiB,EAIjBpB,OAAOiB,WAAP,CAAmB,MAAnB,EAA2BpB,MAA3B,CAAkCqB,GAAlC,CAAsC,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CAAtC,EAAkEC,IAAlE,CAAuEC,MAAvE,CAA8E,CAA9E,CAJiB,EAKjBpB,OAAOiB,WAAP,CAAmB,MAAnB,EAA2BpB,MAA3B,CAAkCqB,GAAlC,CAAsC,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CAAtC,EAAkEC,IAAlE,CAAuEC,MAAvE,CAA8E,CAA9E,CALiB,CAAZ,CAAP;AAOD,GA/BD;AAiCD,CA/CD","file":"schema.spec.js","sourcesContent":["import chai from 'chai';\nimport Plugin, { Schema, SchemaTypes } from '../index';\n\nconst modelName = 'test';\nconst tableName = 'memory';\nconst should = chai.should();\n\ndescribe('schema', function() {\n\n  it('#create success', () => {\n    const schema = new Schema(modelName, {\n      userId: {\n        type: SchemaTypes.number,\n      },\n      login: {\n        type: SchemaTypes.string,\n      }\n    }, { tableName });\n    schema.should.be.instanceof(Schema).equal(schema);\n  });\n\n  it('#all properties correct added in fieldsMask', () => {\n    const mask = [ 'link', 'edit' ];\n    const full = [ 'prop1', 'prop2', 'prop3' ];\n\n    const schema = new Schema(modelName, {\n      [ 'prop0' ]: {\n        type      : SchemaTypes.number,\n        fieldsMask: false          // только прямой запрос\n      },\n      [ 'prop1' ]: {\n        type      : SchemaTypes.number,\n        fieldsMask: 'edit:!link'          // будет в full, edit\n      },\n      'prop2': {\n        type      : SchemaTypes.string,\n        fieldsMask: [ '!edit' ],           // будет в full, link\n      },\n      'prop3': {\n        type      : SchemaTypes.string,\n        fieldsMask: { full: false },      // будет в link, edit\n      }\n    }, { tableName, fieldsMask: mask });\n    console.log(schema.__masks);\n\n    return Promise.all([\n      schema.getMyFields().should.eql([ 'id' ]).with.length(1),\n      schema.getMyFields([ 'id', 'prop0' ]).should.eql([ 'id', 'prop0' ]).with.length(2),\n      schema.getMyFields('full').should.eql([ 'id', 'prop1', 'prop2' ]).with.length(3),\n      schema.getMyFields('link').should.eql([ 'id', 'prop2', 'prop3' ]).with.length(3),\n      schema.getMyFields('edit').should.eql([ 'id', 'prop1', 'prop3' ]).with.length(3)\n    ]);\n  });\n\n});"]}