{"version":3,"sources":["../../src/tests/schema.spec.js"],"names":["modelName","tableName","should","describe","schema","type","number","fieldsMask","string","full","link","edit","console","log","__masks","it","getMyFields","eql","with","length"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,MAAMA,YAAY,MAAlB;AACA,MAAMC,YAAY,QAAlB;AACA,MAAMC,SAAS,eAAKA,MAAL,EAAf;;AAEAC,SAAS,QAAT,EAAmB,YAAW;;AAE5B,QAAMC,SAAS,kBAAWJ,SAAX,EAAsB;AACnC,aAAS;AACPK,YAAY,mBAAYC,MADjB;AAEPC,kBAAY,KAFL,CAEoB;AAFpB,KAD0B;AAKnC,aAAS;AACPF,YAAY,mBAAYC,MADjB;AAEPC,kBAAY,MAFL,CAEoB;AAFpB,KAL0B;AASnC,aAAS;AACPF,YAAY,mBAAYG,MADjB;AAEPD,kBAAY,CAAE,MAAF,CAFL,EAT0B;AAanC,aAAS;AACPF,YAAY,mBAAYG,MADjB;AAEPD,kBAAY,EAAEE,MAAM,KAAR,EAAeC,MAAM,IAArB,EAA2BC,MAAM,IAAjC,EAFL;AAb0B,GAAtB,EAiBZ,EAAEV,SAAF,EAAaM,YAAY,CAAE,MAAF,EAAU,MAAV,CAAzB,EAjBY,CAAf;;AAmBAK,UAAQC,GAAR,CAAYT,OAAOU,OAAnB;;AAEAC,KAAG,oCAAH,EAAyC,MACvCX,OAAOY,WAAP,GACGd,MADH,CACUe,GADV,CACc,CAAE,IAAF,CADd,EACwBC,IADxB,CAC6BC,MAD7B,CACoC,CADpC,CADF;;AAIAJ,KAAI,kDAAJ,EAAuD,MACrDX,OAAOY,WAAP,CAAmB,CAAE,IAAF,EAAQ,OAAR,CAAnB,EACGd,MADH,CACUe,GADV,CACc,CAAE,IAAF,EAAQ,OAAR,CADd,EACiCC,IADjC,CACsCC,MADtC,CAC6C,CAD7C,CADF;;AAIAJ,KAAI,8CAAJ,EAAmD,MACjDX,OAAOY,WAAP,CAAmB,MAAnB,EACGd,MADH,CACUe,GADV,CACc,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CADd,EAC0CC,IAD1C,CAC+CC,MAD/C,CACsD,CADtD,CADF;;AAIAJ,KAAI,8CAAJ,EAAmD,MACjDX,OAAOY,WAAP,CAAmB,MAAnB,EACGd,MADH,CACUe,GADV,CACc,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CADd,EAC0CC,IAD1C,CAC+CC,MAD/C,CACsD,CADtD,CADF;;AAIAJ,KAAI,8CAAJ,EAAmD,MACjDX,OAAOY,WAAP,CAAmB,MAAnB,EACGd,MADH,CACUe,GADV,CACc,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CADd,EAC0CC,IAD1C,CAC+CC,MAD/C,CACsD,CADtD,CADF;AAID,CA3CD","file":"schema.spec.js","sourcesContent":["import chai from 'chai';\nimport Plugin, { Schema, SchemaTypes } from '../index';\n\nconst modelName = 'test';\nconst tableName = 'memory';\nconst should = chai.should();\n\ndescribe('schema', function() {\n  \n  const schema = new Schema(modelName, {\n    'prop0': {\n      type      : SchemaTypes.number,\n      fieldsMask: false          // только прямой запрос\n    },\n    'prop1': {\n      type      : SchemaTypes.number,\n      fieldsMask: 'edit'         // будет в full, edit\n    },\n    'prop2': {\n      type      : SchemaTypes.string,\n      fieldsMask: [ 'link' ],    // будет в full, link\n    },\n    'prop3': {\n      type      : SchemaTypes.string,\n      fieldsMask: { full: false, link: true, edit: true },      // будет в link, edit\n    }\n  }, { tableName, fieldsMask: [ 'link', 'edit' ] });\n  \n  console.log(schema.__masks);\n  \n  it('#fields === undefined => только id', () =>\n    schema.getMyFields()\n      .should.eql([ 'id' ]).with.length(1));\n  \n  it(`fields === [ 'id', 'prop0' ] => только id, prop0`, () =>\n    schema.getMyFields([ 'id', 'prop0' ])\n      .should.eql([ 'id', 'prop0' ]).with.length(2));\n  \n  it(`fields === 'full' => только id, prop1, prop2`, () =>\n    schema.getMyFields('full')\n      .should.eql([ 'id', 'prop1', 'prop2' ]).with.length(3));\n  \n  it(`fields === 'link' => только id, prop2, prop3`, () =>\n    schema.getMyFields('link')\n      .should.eql([ 'id', 'prop2', 'prop3' ]).with.length(3));\n  \n  it(`fields === 'edit' => только id, prop1, prop3`, () =>\n    schema.getMyFields('edit')\n      .should.eql([ 'id', 'prop1', 'prop3' ]).with.length(3));\n  \n});"]}