{"version":3,"sources":["../src/index.js"],"names":["Schema","Types","middleware","client","driver","connection","micro","name","pluginId","plugin","id","useNullAsDefault","actions","tree","find","one","list","count","create","update","remove"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;QAESA,M;AACF,IAAMC,6CAAN;AACA,IAAMC,gDAAN;;kBAEQ;AAAA,iFAAoC,EAApC;AAAA,MAAUC,MAAV,QAAGC,MAAH;AAAA,MAAqBC,UAArB;;AAAA,SAA2C,UAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAA2B;AACnF,QAAMC,SAAS,EAAEF,UAAF,EAAQG,IAAIF,QAAZ,EAAf;AACA,QAAMN,aAAa,oBAAK;AACtBC,oBADsB;AAEtBE,4BAFsB;AAGtBM,wBAAkB;AAHI,KAAL,CAAnB;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO;AACLX,8BADK;AAELC,kCAFK;AAGLC,4BAHK;AAILU,eAAS;AACPC,cAAM,oBAAKX,UAAL,EAAiBI,KAAjB,EAAwBG,MAAxB,CADC;AAEPK,cAAM;AACJC,eAAM,mBAAQb,UAAR,EAAoBI,KAApB,EAA2BG,MAA3B,CADF;AAEJO,gBAAM,oBAASd,UAAT,EAAqBI,KAArB,EAA4BG,MAA5B;AAFF,SAFC;AAMPQ,eAAQ,qBAAMf,UAAN,EAAkBI,KAAlB,EAAyBG,MAAzB,CAND;AAOPS,gBAAQ,sBAAOhB,UAAP,EAAmBI,KAAnB,EAA0BG,MAA1B,CAPD;AAQPU,gBAAQ,sBAAOjB,UAAP,EAAmBI,KAAnB,EAA0BG,MAA1B,CARD;AASPW,gBAAQ,sBAAOlB,UAAP,EAAmBI,KAAnB,EAA0BG,MAA1B;AATD;AAJJ,KAAP;AAgBD,GApCc;AAAA,C","file":"index.js","sourcesContent":["import knex from 'knex';\nimport Schema from './utils/schema';\nimport SchemaTypes from './utils/schema-types';\nimport findOne from './actions/find/one';\nimport findList from './actions/find/list';\nimport create from './actions/create';\nimport update from './actions/update';\nimport count from './actions/count';\nimport remove from './actions/remove';\nimport tree from './actions/tree';\n\nexport { Schema };\nexport const Types = SchemaTypes;\nexport const middleware = knex;\n\nexport default ({ driver:client, ...connection } = {}) => (micro, name, pluginId) => {\n  const plugin = { name, id: pluginId };\n  const middleware = knex({\n    client,\n    connection,\n    useNullAsDefault: true\n  });\n\n  // micro\n  //   .queue({\n  //     case: 'wait',\n  //     args: [],\n  //     done: () => !handleListen ? Promise.resolve() : handleListen.listen()\n  //   })\n  //   .queue({\n  //     case: 'close',\n  //     args: [],\n  //     done: () => !handleListen ? Promise.resolve() : handleListen.close()\n  //   });\n\n  return {\n    Schema,\n    Types: SchemaTypes,\n    middleware,\n    actions: {\n      tree: tree(middleware, micro, plugin),\n      find: {\n        one : findOne(middleware, micro, plugin),\n        list: findList(middleware, micro, plugin)\n      },\n      count : count(middleware, micro, plugin),\n      create: create(middleware, micro, plugin),\n      update: update(middleware, micro, plugin),\n      remove: remove(middleware, micro, plugin)\n    }\n  }\n}"]}